#!/bin/bash

# Make sure we are not running as root, but that we have sudo privileges.
if [ "$(id -u)" = "0" ]; then
   echo "This script must NOT be run as root (or with sudo)!"
   echo "if you need to create a sudo user (e.g. satoshi), run the following commands:"
   echo "   sudo adduser satoshi"
   echo "   sudo usermod -aG sudo satoshi"
   echo "   sudo su satoshi # Switch to the new user"
   exit 1
elif [ "$(sudo -l | grep '(ALL : ALL) ALL' | wc -l)" = 0 ]; then
   echo "You do not have enough sudo privileges!"
   exit 1
fi
cd ~; sudo pwd # Print Working Directory; have the user enable sudo access if not already.

# Give the user pertinent information about this script and how to use it.
cat << EOF | sudo tee ~/readme.txt
This readme was generated by the "micronode_stratum_remote.sh" install script.
The "micronode_stratum_remote.sh" script create an remote mining access point to stratum node (within a cluster).
This way, mining operation can be on seperate networks from the mining (stratum) node.
To run this script successfully, you'll need the following information from the stratum node: HOSTKEY, TARGETADDRESS, (SSHPORT = 22), and (STRATUMPORT = 3333)
To execute this script, login as a sudo user (that is not root) and execute the following commands:
    sudo apt-get -y install git
    cd ~; git clone https://github.com/satoshiware/microbank
    bash ./microbank/scripts/pre_fork_micro/micronode_stratum_remote.sh
    rm -rf microbank

Note: Make sure to assign a static IP to this remote access point on the router!

Once setup and running, miners on the same local network can be directed to the following address:
    stratum+tcp://$(hostname -I | tr -d '[:blank:]'):3333

FYI:
    The "$USER/.ssh/authorized_keys" file contains administrator login keys.
    sudo systemctl status p2pssh@remote # View the status of the connection

Hardware:
    Rasperry Pi Zero 2 W
    Aluminum Passive Case
    OTG Micro USB Ethernet Adapter
    USB Power Supply
EOF
read -p "Press the enter key to continue..."

# Create .ssh folder and authorized_keys file if it does not exist
if ! [ -f ~/.ssh/authorized_keys ]; then
    sudo mkdir -p ~/.ssh
    sudo touch ~/.ssh/authorized_keys
    sudo chown -R $USER:$USER ~/.ssh
    sudo chmod 700 ~/.ssh
    sudo chmod 600 ~/.ssh/authorized_keys
fi

# Run latest updates and upgrades
sudo apt-get -y update
sudo DEBIAN_FRONTEND=noninteractive apt-get -y install --only-upgrade openssh-server # Upgrade seperatly to ensure non-interactive mode
sudo apt-get -y upgrade

# Install needed packages
sudo apt-get -y install ufw autossh ssh

# Generate public/private keys (non-encrytped)
sudo ssh-keygen -t ed25519 -f /root/.ssh/p2pkey -N "" -C ""

# Create systemd remote connection Service File
cat << EOF | sudo tee /etc/systemd/system/p2pssh@.service
[Unit]
Description=AutoSSH %I Tunnel Service
Before=bitcoind.service
After=network-online.target

[Service]
Environment="AUTOSSH_GATETIME=0"
EnvironmentFile=/etc/default/p2pssh@%i
ExecStart=/usr/bin/autossh -M 0 -NT -o ServerAliveInterval=30 -o ExitOnForwardFailure=yes -o "ServerAliveCountMax 3" -i /root/.ssh/p2pkey -L 0.0.0.0:\${LOCAL_PORT}:localhost:\${FORWARD_PORT} -p \${TARGET_PORT} p2p@\${TARGET}

RestartSec=5
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# Display this remote mining bridge information
echo ""; echo "Hostname: $(hostname)"
echo "    P2P Key (Public): $(sudo cat /root/.ssh/p2pkey.pub)" | sudo tee -a ~/readme.txt; echo ""

# Get the necessary details to connect to the Level 3 node
echo "Need to get the details in order to connect this remote mining bridge to your level 3 node..."
read -p "Target's Host (Public) Key: " HOSTKEY
read -p "Target's Address: " TARGETADDRESS
read -p "Target's SSH PORT (default = 22): " SSHPORT; if [ -z $SSHPORT ]; then SSHPORT="22"; fi
read -p "Target's Stratum Port (default = 3333): " STRATUMPORT; if [ -z $STRATUMPORT ]; then STRATUMPORT="3333"; fi

# Update known_hosts
HOSTSIG=$(ssh-keyscan -p ${SSHPORT} -H ${TARGETADDRESS})
if [[ "${HOSTSIG}" == *"${HOSTKEY}"* ]]; then
    sudo sed -i "/ssh-ed25519/d" /root/.ssh/known_hosts 2> /dev/null # Remove prexisting hosts
    echo "${HOSTSIG} # LVL3 Address is ${TARGETADDRESS}:${SSHPORT}" | sudo tee -a /root/.ssh/known_hosts
else
    echo "CRITICAL ERROR: REMOTE HOST IDENTIFICATION DOES NOT MATCH GIVEN HOST KEY!!"
    exit 1
fi

# Create p2pssh@ remote connection environment file and start its corresponding systemd service
cat << EOF | sudo tee /etc/default/p2pssh@remote
LOCAL_PORT=3333
FORWARD_PORT=${STRATUMPORT}
TARGET=${TARGETADDRESS}
TARGET_PORT=${SSHPORT}
EOF

# Reload/Enable System Control for new processes
sudo systemctl daemon-reload
sudo systemctl stop p2pssh@remote
sudo systemctl enable p2pssh@remote --now

# Setup/Enable the Uncomplicated Firewall (UFW)
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh # Open Default SSH Port
sudo ufw --force enable # Enable Firewall @ Boot and Start it now!

# Open firewall to the stratum port for any local ip
sudo ufw allow from 192.168.0.0/16 to any port 3333
sudo ufw allow from 172.16.0.0/12 to any port 3333
sudo ufw allow from 10.0.0.0/8 to any port 3333