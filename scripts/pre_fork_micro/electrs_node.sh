#!/bin/bash

# Make sure we are not running as root, but that we have sudo privileges.
if [ "$(id -u)" = "0" ]; then
   echo "This script must NOT be run as root (or with sudo)!"
   echo "if you need to create a sudo user (e.g. satoshi), run the following commands:"
   echo "   sudo adduser satoshi"
   echo "   sudo usermod -aG sudo satoshi"
   echo "   sudo su satoshi # Switch to the new user"
   exit 1
elif [ "$(sudo -l | grep '(ALL : ALL) ALL' | wc -l)" = 0 ]; then
   echo "You do not have enough sudo privileges!"
   exit 1
fi
cd ~; sudo pwd # Print Working Directory; have the user enable sudo access if not already.

# Give the user pertinent information about this script and how to use it. <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
cat << EOF | sudo tee ~/readme.txt
This readme was generated by the "electrs_node.sh" install script.
The electrs server indexes the entire Bitcoin blockchain, and the resulting index enables fast queries for any given user wallet,
allowing the user to keep real-time track of balances and transaction history.

FYI:
    Use the mnconnect utility (just type "mnconnect" at the prompt) to create, view, or delete the connection with the p2p node.

    The "$USER/.ssh/authorized_keys" file contains administrator login keys.
    The "/var/lib/bitcoin/micro" directory contains debug logs, blockchain, etc.
    The bitcoind's log files can be view with this file: "/var/log/bitcoin/micro/debug.log" (links to /var/lib/bitcoin/micro/debug.log)

    The "sudo systemctl status bitcoind" command show the status of the bitcoin daemon.


     <<<<<<<<<<< have we zeromqp anywhere that we need to make the numbers the same???? used this anywheree<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<





This readme was generated by the "bitcoin_node.sh" install script.
A bitcoin node has been installed and readied to receive connections from external services.

FYI:
    The "/var/lib/bitcoin" directory contains debug logs, blockchain, etc.
    The bitcoind's log files can be view with this file: "/var/log/bitcoin/debug.log" (links to /var/lib/bitcoin/debug.log)
    Bitcoin configuratijon: /etc/bitcoin.conf
    The "sudo systemctl status bitcoind" command show the status of the bitcoin daemon.

    JSON RPC & REST API connections on port 8332 are allowed from any local IP.
    JSON RPC Password for user satoshi is "satoshi"

    Also, ZeroMQ (ZMQ) connection access on port 29000 is allowed from any local IP.

Management:
    Make permanent P2P outbound connection:
        btc addnode \$ADDRESS:\$PORT "add"
            ":\$PORT" is not necessary for the default port 8333
        echo -e "# \$NAME, \${DESCRIPTION}\naddnode=\$ADDRESS:\$PORT" | sudo tee -a /etc/bitcoin.conf
            ":\$PORT" is not necessary for the default port 8333
            "\$NAME" and "\${DESCRIPTION}" add desired info' as part of the connections' comment heading







HTTP server is available on port 13000 from any IP #### Configure HTTPS forwarding @ the Reverse Proxy! ####
    JSON RPC for electrs connections on port 51001 from any IP. #### Configure SSL forwarding @ the Reverse Proxy! ####

Connect to prometheus for monitoring via port forwarding:
    ssh -L 9090:localhost:9090 -L 9100:localhost:9100 -L 4224:localhost:4224 satoshi@btc-electrum -i ~/.ssh/Yubikey
    It can be reached on the browser @ http://localhost:9090
    Relevant prometheus commands: daemon*


													3001 	192.168.2.5 	3000 (HBCI) 	Bitcoin Electrs HTTP Server (non-encrypted) 	
			WAN 	TCP 	* 	* 	WAN address 	13001 	192.168.2.6 	13000 	AZ-Money Electrs HTTP Server (non-encrypted) 	
			WAN 	TCP 	* 	* 	WAN address 	50002 	192.168.2.6 	50001 	Bitcoin Electrs Server (non-encrypted) 	
			WAN 	TCP 	* 	* 	WAN address 	51002 	192.168.2.6 	51001 	AZ-Money Electrs Server (non-encrypted) 
			
			For the HTTP, The AZ-Money addresses show bc1....
			magic bytes?? Genesis Hash... What do those mean

EOF
read -p "Press the enter key to continue..."

# Create .ssh folder and authorized_keys file if it does not exist
if ! [ -f ~/.ssh/authorized_keys ]; then
    sudo mkdir -p ~/.ssh
    sudo touch ~/.ssh/authorized_keys
    sudo chown -R $USER:$USER ~/.ssh
    sudo chmod 700 ~/.ssh
    sudo chmod 600 ~/.ssh/authorized_keys
fi

# Run latest updates and upgrades
sudo apt-get -y update
sudo DEBIAN_FRONTEND=noninteractive apt-get -y install --only-upgrade openssh-server # Upgrade seperatly to ensure non-interactive mode
sudo apt-get -y upgrade

# Install Packages
sudo apt-get -y install wget autossh ufw clang psmisc prometheus
curl https://sh.rustup.rs -sSf | sh -s -- -y
export PATH=$PATH:~/.cargo/bin

# Load global environment variables
source ~/globals.env

# Configure Prometheus to connect to electrs' monitoring port
cat << EOF | sudo tee -a /etc/prometheus/prometheus.yml
  - job_name: electrs
    static_configs:
      - targets: ['localhost:4224']
EOF

# Authorize Yubikey login for satoshi
echo $YUBIKEY | sudo tee -a ~/.ssh/authorized_keys

# Download electrs, Compile, and Install
cd ~; git clone https://github.com/satoshiware/electrs
cd electrs; cargo clean; cargo build --locked --release
sudo install -m 0755 -o root -g root -t /usr/bin ~/electrs/target/release/electrs
cd ~; rm -rf electrs

# Install rpcauth Utility
sudo mkdir -p /usr/share/python
sudo mv ~/microbank/python/rpcauth.py /usr/share/python/rpcauth.py
sudo chmod +x /usr/share/python/rpcauth.py
echo "#"\!"/bin/sh" | sudo tee /usr/share/python/rpcauth.sh
echo "python3 /usr/share/python/rpcauth.py \$1 \$2" | sudo tee -a /usr/share/python/rpcauth.sh
sudo ln -s /usr/share/python/rpcauth.sh /usr/bin/rpcauth
sudo chmod 755 /usr/bin/rpcauth

# Download Bitcoin Core (micro), Verify Checksum
wget $BTC_CORE_MICRO_SOURCE
if ! [ -f ~/${BTC_CORE_MICRO_SOURCE##*/} ]; then echo "Error: Could not download source!"; exit 1; fi
if [[ ! "$(sha256sum ~/${BTC_CORE_MICRO_SOURCE##*/})" == *"$BTC_CORE_MICRO_CHECKSUM"* ]]; then
    echo "Error: SHA 256 Checksum for file \"~/${BTC_CORE_MICRO_SOURCE##*/}\" was not what was expected!"
    exit 1
fi
tar -xzf ${BTC_CORE_MICRO_SOURCE##*/}
rm ${BTC_CORE_MICRO_SOURCE##*/}

# Install Binaries
sudo install -m 0755 -o root -g root -t /usr/bin bitcoin-install/bin/*
rm -rf bitcoin-install

# Prepare Service Configuration
cat << EOF | sudo tee /etc/systemd/system/bitcoind.service
[Unit]
Description=Bitcoin daemon
After=network-online.target
Wants=network-online.target

[Service]
ExecStart=/usr/bin/bitcoind -micro -daemonwait -pid=/run/bitcoin/bitcoind.pid -conf=/etc/bitcoin.conf -datadir=/var/lib/bitcoin
ExecStop=/usr/bin/bitcoin-cli -micro -conf=/etc/bitcoin.conf -datadir=/var/lib/bitcoin stop

Type=forking
PIDFile=/run/bitcoin/bitcoind.pid
Restart=always
RestartSec=30
TimeoutStartSec=infinity
TimeoutStopSec=600

### Run as bitcoin:bitcoin ###
User=bitcoin
Group=bitcoin

### /run/bitcoin ###
RuntimeDirectory=bitcoin
RuntimeDirectoryMode=0710

### /var/lib/bitcoin ###
StateDirectory=bitcoin
StateDirectoryMode=0710

### Hardening measures ###
PrivateTmp=true
ProtectSystem=full
ProtectHome=true
NoNewPrivileges=true
PrivateDevices=true
MemoryDenyWriteExecute=true

[Install]
WantedBy=multi-user.target
EOF

#Create a bitcoin System User
sudo useradd --system --shell=/sbin/nologin bitcoin

# Wrap the Bitcoin CLI Binary with its Runtime Configuration
echo "alias btc=\"sudo -u bitcoin /usr/bin/bitcoin-cli -micro -datadir=/var/lib/bitcoin -conf=/etc/bitcoin.conf\"" | sudo tee -a /etc/bash.bashrc # Reestablish alias @ boot

# Generate Strong Bitcoin RPC Password
BTCRPCPASSWD=$(openssl rand -base64 16)
BTCRPCPASSWD=${BTCRPCPASSWD//\//0} # Replace '/' characters with '0'
BTCRPCPASSWD=${BTCRPCPASSWD//+/1} # Replace '+' characters with '1'
BTCRPCPASSWD=${BTCRPCPASSWD//=/} # Replace '=' characters with ''
echo $BTCRPCPASSWD | sudo tee /root/rpcpasswd
BTCRPCPASSWD="" # Erase from memory
sudo chmod 400 /root/rpcpasswd

# Generate Bitcoin Configuration File with the Appropriate Permissions
cat << EOF | sudo tee /etc/bitcoin.conf
# [core]
# Maintain coinstats index used by the gettxoutsetinfo RPC.
coinstatsindex=1
# Maintain a full transaction index, used by the getrawtransaction rpc call.
txindex=1
# The UTXO database cache size in MB (default 450)
dbcache=256

# [rpc]
# Accept command line and JSON-RPC commands.
server=1
# Accept public REST requests (runs on same port as JSON-RPC).
rest=1
# Allow JSON-RPC connections from specified source.
rpcallowip=$(hostname -I | cut -d "." -f 1,2,3).0/24

# Set the number of threads to service RPC calls (default = 4)
rpcthreads=16
# Set the depth of the work queue to service RPC calls (default = 16)
rpcworkqueue=32
# Number of seconds after which an uncompleted RPC call will time out (default = 30)
rpcservertimeout=60

# Username (satoshi) and hashed password for JSON-RPC connections. RPC clients connect using rpcuser=<USERNAME>/rpcpassword=\$(sudo cat /root/rpcpasswd) arguments.
$(rpcauth satoshi $(sudo cat /root/rpcpasswd) | grep 'rpcauth')
# Allow users to access any RPC unless they are listed in an rpcwhitelist entry
rpcwhitelistdefault=0
# Set a whitelist to filter incoming RPC calls for satoshi
rpcwhitelist=satoshi:getbestblockhash,getblock,getblockchaininfo,getblockcount,getblockfilter,getblockhash,getblockheader,getblockstats,getchaintips,getchaintxstats,getdifficulty,getmempoolancestors,getmempooldescendants,getmempoolentry,getmempoolinfo,getrawmempool,gettxout,gettxoutproof,gettxoutsetinfo,verifytxoutproof,getmemoryinfo,getrpcinfo,help,uptime,getblocktemplate,getmininginfo,getnetworkhashps,getaddednodeinfo,getconnectioncount,getnettotals,getnetworkinfo,getnodeaddresses,getpeerinfo,listbanned,combinerawtransaction,createrawtransaction,decoderawtransaction,decodescript,getrawtransaction,sendrawtransaction,signrawtransactionwithkey,testmempoolaccept,createmultisig,deriveaddresses,estimatesmartfee,getdescriptorinfo,signmessagewithprivkey,validateaddress,verifymessage,submitblock,submitheader,getindexinfo

# [wallet]
# Do not load the wallet and disable wallet RPC calls.
disablewallet=1

# [zeromq]
# Enable publishing of block hashes
zmqpubhashblock=tcp://localhost:39000
# Enable publishing of transaction hashes
zmqpubhashtx=tcp://localhost:39000
# Enable publishing of raw block hex
zmqpubrawblock=tcp://localhost:39000
# Enable publishing of raw transaction hex
zmqpubrawtx=tcp://localhost:39000
# Enable publish hash block and tx sequence
zmqpubsequence=tcp://localhost:39000

# [network]
# Whitelist P2P peers connecting from the given IP addresses
whitelist=$(hostname -I | cut -d "." -f 1,2,3).0/24

[micro]
# Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. This option can be specified multiple times. (default: 127.0.0.1 and ::1)
rpcbind=0.0.0.0
# Add a node IP address "addnode=\$ADDRESS" to connect to and to keep the connection open.
EOF
sudo chown root:bitcoin /etc/bitcoin.conf
sudo chmod 640 /etc/bitcoin.conf

# Configure bitcoind's Log Files; Prevents them from Filling up the Partition
cat << EOF | sudo tee /etc/logrotate.d/bitcoin
/var/lib/bitcoin/micro/debug.log {
$(printf '\t')create 660 root bitcoin
$(printf '\t')daily
$(printf '\t')rotate 14
$(printf '\t')compress
$(printf '\t')delaycompress
$(printf '\t')sharedscripts
$(printf '\t')postrotate
$(printf '\t')$(printf '\t')killall -HUP bitcoind
$(printf '\t')endscript
}
EOF

# Setup a Symbolic Link to Standardize the Location of bitcoind's Log Files
sudo mkdir -p /var/log/bitcoin/micro
sudo ln -s /var/lib/bitcoin/micro/debug.log /var/log/bitcoin/micro/debug.log
sudo chown root:bitcoin -R /var/log/bitcoin
sudo chmod 660 -R /var/log/bitcoin

# Generate public/private keys (non-encrytped)
sudo ssh-keygen -t ed25519 -f /root/.ssh/p2pkey -N "" -C ""

# Create known_hosts file
sudo touch /root/.ssh/known_hosts

# Create systemd Service File
cat << EOF | sudo tee /etc/systemd/system/p2pssh@.service
[Unit]
Description=AutoSSH %I Tunnel Service
Before=bitcoind.service
After=network-online.target

[Service]
Environment="AUTOSSH_GATETIME=0"
EnvironmentFile=/etc/default/p2pssh@%i
ExecStart=/usr/bin/autossh -M 0 -NT -o ServerAliveInterval=30 -o ExitOnForwardFailure=yes -o "ServerAliveCountMax 3" -i /root/.ssh/p2pkey -L \${LOCAL_PORT}:localhost:19333 -p \${TARGET_PORT} p2p@\${TARGET}

RestartSec=5
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# Prepare Service Configuration for electrs
cat << EOF | sudo tee /etc/systemd/system/electrs.service
[Unit]
Description=electrs
After=network-online.target

[Service]
WorkingDirectory=/var/lib/electrs
# Prefix address search enabled: --address-search
# Indexing of provably unspendable outputs enabled: --index-unspendables
# Use JSONRPC instead of importing blk*.dat files. Required for remote connections: --jsonrpc-import
# Prepend log lines with a timestamp: --timestamp
# Increase logging verbosity: -v
# Select the network of choice: --network mainnet
# The listening RPC address:port of bitcoind: --daemon-rpc-addr localhost:19332
# Directory where the index will be stored: --db-dir /var/lib/electrs
# HTTP server 'addr:port' to listen on: --http-addr 0.0.0.0:13000 #### Configure HTTPS forwarding @ the Reverse Proxy! ####
# JSON RPC for electrs will listen to all IPs on port 50001: --electrum-rpc-addr 0.0.0.0:51001 #### Configure SSL forwarding @ the Reverse Proxy! ####
# Bitcoin JSON RPC authentication: --cookie satoshi:\$(sudo cat /root/rpcpasswd)
# Maximum number of transactions [default: 500] returned (does not apply for the http api). Lookups with more results will fail: --electrum-txs-limit 500
# Maximum number of utxos [default: 500] to process per address (applies to both electrum & http api). Lookups for addresses with more utxos will fail: --utxos-limit 500
# Number of JSONRPC requests [default: 4] to send in parallel: --daemon-parallelism 4
# Select RPC logging option: --electrum-rpc-logging full
ExecStart=/usr/bin/electrs \
    -vvvv \
    --address-search \
    --index-unspendables \
    --jsonrpc-import \
    --timestamp \
    --daemon-rpc-addr localhost:19332 \
    --db-dir /var/lib/electrs \
    --http-addr 0.0.0.0:13000 \
    --electrum-rpc-addr 0.0.0.0:51001 \
    --cookie satoshi:$(sudo cat /root/rpcpasswd) \
    --electrum-txs-limit 500 \
    --utxos-limit 500 \
    --daemon-parallelism 4 \
    --electrum-rpc-logging full

Type=simple
KillMode=process
TimeoutSec=60
Restart=always
RestartSec=60

Environment="RUST_BACKTRACE=1"
LimitNOFILE=1048576

### Run as electrs:electrs ###
User=electrs
Group=electrs

### /var/lib/electrs ###
StateDirectory=electrs
StateDirectoryMode=0710

### Hardening measures ###
PrivateTmp=true
ProtectSystem=full
NoNewPrivileges=true
MemoryDenyWriteExecute=true

[Install]
WantedBy=multi-user.target
EOF

# Create a electrs System User
sudo useradd --system --shell=/sbin/nologin electrs

# Setup a Symbolic Link to Standardize the Location of electrs' Log Files
sudo mkdir -p /var/log/electrs
sudo ln -s /var/lib/electrs/mainnet/newindex/txstore/LOG /var/log/electrs/debug.log

# Install/Setup/Enable the Uncomplicated Firewall (UFW)
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh # Open Default SSH Port
sudo ufw allow from $(hostname -I | cut -d "." -f 1,2,3).0/24 to any port 19332 # Open JSON RPC connections on port 19332 from the local network only
sudo ufw allow from $(hostname -I | cut -d "." -f 1,2,3).0/24 to any port 39000 # Open ZeroMQ (ZMQ) connection access on port 29000 from the local network only
sudo ufw allow 13000 # Open up Electrs HTTP server #### Configure SSL forwarding @ the Reverse Proxy! ####
sudo ufw allow 51001 # Open Electrs JSON RPC connection access #### Configure SSL forwarding @ the Reverse Proxy! ####
sudo ufw --force enable # Enable Firewall @ Boot and Start it now!

# Reload/Enable System Control for new processes
sudo systemctl daemon-reload
sudo systemctl enable ssh
sudo systemctl enable bitcoind
sudo systemctl enable electrs

# Install the micronode connect utility (mnconnect.sh)
bash ~/microbank/scripts/pre_fork_micro/mnconnect.sh --install

# Restart the machine
sudo reboot now