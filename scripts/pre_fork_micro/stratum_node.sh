#!/bin/bash

# Make sure we are not running as root, but that we have sudo privileges.
if [ "$(id -u)" = "0" ]; then
   echo "This script must NOT be run as root (or with sudo)!"
   echo "if you need to create a sudo user (e.g. satoshi), run the following commands:"
   echo "   sudo adduser satoshi"
   echo "   sudo usermod -aG sudo satoshi"
   echo "   sudo su satoshi # Switch to the new user"
   exit 1
elif [ "$(sudo -l | grep '(ALL : ALL) ALL' | wc -l)" = 0 ]; then
   echo "You do not have enough sudo privileges!"
   exit 1
fi
cd ~; sudo pwd # Print Working Directory; have the user enable sudo access if not already.

# Give the user pertinent information about this script and how to use it.
cat << EOF | sudo tee ~/readme.txt
This readme was generated by the "stratum_node.sh" install script.
The Stratum node is used to manage the microcurrency mining operation for a "minibank".

FYI:
    Use the mnconnect utility (just type "mnconnect" at the prompt) to create, view, or delete the connection with the p2p node.
    Use the poolu tool to configure notifications and view all the pertinent informaiton for a healthy mining operation (and setup a remote mining operations)
    Configure the send_messages utility (just type "send_messages --generate" at the prompt) to receive messages from this node.

    The "$USER/.ssh/authorized_keys" file contains administrator login keys.
    The "/var/lib/bitcoin/micro" directory contains debug logs, blockchain, etc.
    The bitcoind's log files can be viewed with this file: "/var/log/bitcoin/micro/debug.log" (links to /var/lib/bitcoin/micro/debug.log)
    The "/var/lib/bitcoin/micro/wallets/mining" directory contains the (encrypted) mining wallet copied from the Wallet Node.

    The "sudo systemctl status bitcoind" command show the status of the bitcoin daemon.
EOF

echo ""; echo ""; echo ""; echo "To run this script, you'll need the Bitcoin Core micronode download URL (tar.gz file) with its SHA 256 Checksum."
echo "Also, you will need the USB drive containg the backup of the \"mining\" wallet created during the \"Wallet Node\" installation."
echo "Note: No modifications to the USB drive will be made. It simply needs the encrypted \"mining\" wallet (passphrase not needed)."
echo "    STORE USB IN SAFE & SECURE PLACE WHEN FINISHED!!!"; echo "";

read -p "Press the enter key to continue..."

# Create .ssh folder and authorized_keys file if it does not exist
if ! [ -f ~/.ssh/authorized_keys ]; then
    sudo mkdir -p ~/.ssh
    sudo touch ~/.ssh/authorized_keys
    sudo chown -R $USER:$USER ~/.ssh
    sudo chmod 700 ~/.ssh
    sudo chmod 600 ~/.ssh/authorized_keys
fi

# Run latest updates and upgrades
sudo apt-get -y update
sudo DEBIAN_FRONTEND=noninteractive apt-get -y install --only-upgrade openssh-server # Upgrade seperatly to ensure non-interactive mode
sudo apt-get -y upgrade

# Install Packages
sudo apt-get -y install wget psmisc autossh ssh ufw python3 jq
sudo apt-get -y install build-essential yasm autoconf automake libtool libzmq3-dev
sudo apt-get -y install pkg-config # ckpool/ckproxy will not successfully configure/compile without this package using Debian Bookworm (x12)

# Install rpcauth Utility
sudo mkdir -p /usr/share/python
sudo mv ~/microbank/python/rpcauth.py /usr/share/python/rpcauth.py
sudo chmod +x /usr/share/python/rpcauth.py
echo "#"\!"/bin/sh" | sudo tee /usr/share/python/rpcauth.sh
echo "python3 /usr/share/python/rpcauth.py \$1 \$2" | sudo tee -a /usr/share/python/rpcauth.sh
sudo ln -s /usr/share/python/rpcauth.sh /usr/bin/rpcauth
sudo chmod 755 /usr/bin/rpcauth

# Download Bitcoin Core (micro), Verify Checksum
read -p "Bitcoin Core URL (.tar.gz) source (/w compiled microcurrency): " SOURCE
read -p "SHA 256 Checksum for the .tar.gz source file: " CHECKSUM
read -p "Domain name address: " DNS; DNS=${DNS,,}; DNS=${DNS#http://}; DNS=${DNS#https://}; DNS=${DNS#www.}; DNS=${DNS%.com}; DNS=${DNS%.org}; DNS=${DNS%.net} # Make lowercase and remove http(s), www, .com, .org, and .net if they exist.
echo $DNS

wget $SOURCE
if ! [ -f ~/${SOURCE##*/} ]; then echo "Error: Could not download source!"; exit 1; fi
if [[ ! "$(sha256sum ~/${SOURCE##*/})" == *"$CHECKSUM"* ]]; then
    echo "Error: SHA 256 Checksum for file \"~/${SOURCE##*/}\" was not what was expected!"
    exit 1
fi
tar -xzf ${SOURCE##*/}
rm ${SOURCE##*/}

# Install Binaries
sudo install -m 0755 -o root -g root -t /usr/bin bitcoin-install/bin/*
rm -rf bitcoin-install

# Prepare Service Configuration
cat << EOF | sudo tee /etc/systemd/system/bitcoind.service
[Unit]
Description=Bitcoin daemon
After=network-online.target
Wants=network-online.target

[Service]
ExecStart=/usr/bin/bitcoind -micro -daemonwait -pid=/run/bitcoin/bitcoind.pid -conf=/etc/bitcoin.conf -datadir=/var/lib/bitcoin
ExecStop=/usr/bin/bitcoin-cli -micro -conf=/etc/bitcoin.conf -datadir=/var/lib/bitcoin stop

Type=forking
PIDFile=/run/bitcoin/bitcoind.pid
Restart=always
RestartSec=30
TimeoutStartSec=infinity
TimeoutStopSec=600

### Run as bitcoin:bitcoin ###
User=bitcoin
Group=bitcoin

### /run/bitcoin ###
RuntimeDirectory=bitcoin
RuntimeDirectoryMode=0710

### /var/lib/bitcoin ###
StateDirectory=bitcoin
StateDirectoryMode=0710

### Hardening measures ###
PrivateTmp=true
ProtectSystem=full
ProtectHome=true
NoNewPrivileges=true
PrivateDevices=true
MemoryDenyWriteExecute=true

[Install]
WantedBy=multi-user.target
EOF

#Create a bitcoin System User
sudo useradd --system --shell=/sbin/nologin bitcoin

# Wrap the Bitcoin CLI Binary with its Runtime Configuration
echo "alias btc=\"sudo -u bitcoin /usr/bin/bitcoin-cli -micro -datadir=/var/lib/bitcoin -conf=/etc/bitcoin.conf\"" | sudo tee -a /etc/bash.bashrc # Reestablish alias @ boot

# Generate Strong Bitcoin RPC Password
BTCRPCPASSWD=$(openssl rand -base64 16)
BTCRPCPASSWD=${BTCRPCPASSWD//\//0} # Replace '/' characters with '0'
BTCRPCPASSWD=${BTCRPCPASSWD//+/1} # Replace '+' characters with '1'
BTCRPCPASSWD=${BTCRPCPASSWD//=/} # Replace '=' characters with ''
echo $BTCRPCPASSWD | sudo tee /root/rpcpasswd
BTCRPCPASSWD="" # Erase from memory
sudo chmod 400 /root/rpcpasswd

# Generate Bitcoin Configuration File with the Appropriate Permissions
cat << EOF | sudo tee /etc/bitcoin.conf
server=1
txindex=1
$(rpcauth satoshi $(sudo cat /root/rpcpasswd) | grep 'rpcauth')
[micro]
EOF
sudo chown root:bitcoin /etc/bitcoin.conf
sudo chmod 640 /etc/bitcoin.conf

# Configure bitcoind's Log Files; Prevents them from Filling up the Partition
cat << EOF | sudo tee /etc/logrotate.d/bitcoin
/var/log/bitcoin/micro/debug.log {
$(printf '\t')create 660 root bitcoin
$(printf '\t')daily
$(printf '\t')rotate 14
$(printf '\t')compress
$(printf '\t')delaycompress
$(printf '\t')sharedscripts
$(printf '\t')postrotate
$(printf '\t')$(printf '\t')killall -HUP bitcoind
$(printf '\t')endscript
}
EOF

# Setup a Symbolic Link to Standardize the Location of bitcoind's Log Files
sudo mkdir -p /var/log/bitcoin/micro
sudo ln -s /var/lib/bitcoin/micro/debug.log /var/log/bitcoin/micro/debug.log
sudo chown root:bitcoin -R /var/log/bitcoin
sudo chmod 660 -R /var/log/bitcoin

# Install/Setup/Enable the Uncomplicated Firewall (UFW)
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh # Open Default SSH Port
sudo ufw --force enable # Enable Firewall @ Boot and Start it now!

# Open firewall to the stratum port for any local ip
PNETWORK=$(echo $(hostname -I) | cut -d '.' -f 1)
if [[ ${PNETWORK} = "192" ]]; then
    sudo ufw allow from 192.168.0.0/16 to any port 3333
elif [[ ${PNETWORK} = "172" ]]; then
    sudo ufw allow from 172.16.0.0/12 to any port 3333
elif [[ ${PNETWORK} = "10" ]]; then
    sudo ufw allow from 10.0.0.0/8 to any port 3333
fi

# Install/Setup/Enable SSH(D)
sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config # Disable password login
sudo sed -i 's/X11Forwarding yes/#X11Forwarding no/g' /etc/ssh/sshd_config # Disable X11Forwarding (default value)
sudo sed -i 's/#AllowTcpForwarding yes/AllowTcpForwarding Local/g' /etc/ssh/sshd_config # Only allow local port forwarding
sudo sed -i 's/#.*StrictHostKeyChecking ask/\ \ \ \ StrictHostKeyChecking yes/g' /etc/ssh/ssh_config # Enable strict host verification

echo -e "\nMatch User *,"'!'"stratum,"'!'"root,"'!'"$USER" | sudo tee -a /etc/ssh/sshd_config
echo -e "\tAllowTCPForwarding no" | sudo tee -a /etc/ssh/sshd_config
echo -e "\tPermitTTY no" | sudo tee -a /etc/ssh/sshd_config
echo -e "\tForceCommand /usr/sbin/nologin" | sudo tee -a /etc/ssh/sshd_config

echo -e "\nMatch User stratum" | sudo tee -a /etc/ssh/sshd_config
echo -e "\tPermitTTY no" | sudo tee -a /etc/ssh/sshd_config
echo -e "\tPermitOpen localhost:3333" | sudo tee -a /etc/ssh/sshd_config # Denies any request of local forwarding besides localhost:3333 (stratum port)

# Setup a "no login" user called "stratum"
sudo useradd -s /bin/false -m -d /home/stratum stratum

# Create (stratum) .ssh folder; Set ownership and permissions
sudo mkdir -p /home/stratum/.ssh
sudo touch /home/stratum/.ssh/authorized_keys
sudo chown -R stratum:stratum /home/stratum/.ssh
sudo chmod 700 /home/stratum/.ssh
sudo chmod 600 /home/stratum/.ssh/authorized_keys

# Generate public/private keys (non-encrytped)
sudo ssh-keygen -t ed25519 -f /root/.ssh/p2pkey -N "" -C ""

# Create known_hosts file
sudo touch /root/.ssh/known_hosts

# Create systemd Service File
cat << EOF | sudo tee /etc/systemd/system/p2pssh@.service
[Unit]
Description=AutoSSH %I Tunnel Service
Before=bitcoind.service
After=network-online.target

[Service]
Environment="AUTOSSH_GATETIME=0"
EnvironmentFile=/etc/default/p2pssh@%i
ExecStart=/usr/bin/autossh -M 0 -NT -o ServerAliveInterval=30 -o ExitOnForwardFailure=yes -o "ServerAliveCountMax 3" -i /root/.ssh/p2pkey -L \${LOCAL_PORT}:localhost:19333 -p \${TARGET_PORT} p2p@\${TARGET}

RestartSec=5
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# Compile/Install CKPool/CKProxy
git clone https://github.com/satoshiware/ckpool
cd ckpool
./autogen.sh
./configure -prefix /usr
make clean
make
sudo make install
cd ..; rm -rf ckpool

# Create a ckpool System User
sudo useradd --system --shell=/sbin/nologin ckpool

# Create ckpool Log Folders
sudo mkdir -p /var/log/ckpool
sudo chown root:ckpool -R /var/log/ckpool
sudo chmod 670 -R /var/log/ckpool

# Create ckpool.service (Systemd)
cat << EOF | sudo tee /etc/systemd/system/ckpool.service
[Unit]
Description=ckpool (Stratum) Server
After=network-online.target
Wants=bitcoind.service

[Service]
ExecStart=/usr/bin/ckpool --log-shares --killold --config /etc/ckpool.conf

Type=simple
PIDFile=/tmp/ckpool/main.pid
Restart=always
RestartSec=30
TimeoutStopSec=30

### Run as ckpool:ckpool ###
User=ckpool
Group=ckpool

### Hardening measures ###
ProtectSystem=full
ProtectHome=true
NoNewPrivileges=true
PrivateDevices=true

[Install]
WantedBy=multi-user.target
EOF

# Reload/Enable System Control for new processes
sudo systemctl daemon-reload
sudo systemctl enable ssh
sudo systemctl enable bitcoind --now
echo "waiting a few seconds for bitcoind to start"; sleep 15

# Find the unmounted device /dev/sd?1. This device is assumbed to be the usb thumb drive if connected per instructions
mapfile -t disks < <( lsblk | grep "sd[a|b]1.*part" )
for i in "${disks[@]}"; do
    i=$(echo $i | cut -d ' ' -f 1)
    i="s$(echo $i | cut -d 's' -f 2)"

    exists=$(mount | grep "/dev/$i ")
    if [[ -z $exists ]]; then
        usb_device=$(echo $i)
        break
    fi
done

# Copy (via USB) & load the (encrypted) mining wallet (generated on the "Wallet" micronode)
sudo mkdir -p /media/usb
sudo mount /dev/$usb_device /media/usb
sudo systemctl daemon-reload # Take changed configurations from filesystem and regenerate dependency trees

sudo -u bitcoin mkdir -p /var/lib/bitcoin/micro/wallets/mining
sudo chmod 700 /var/lib/bitcoin/micro/wallets/mining
sudo install -C -m 600 -o bitcoin -g bitcoin /media/usb/mining.dat /var/lib/bitcoin/micro/wallets/mining/wallet.dat

sudo umount /dev/$usb_device

sudo -u bitcoin /usr/bin/bitcoin-cli -micro -datadir=/var/lib/bitcoin -conf=/etc/bitcoin.conf loadwallet mining true

# Create ckpool Configuration File
MININGADDRESS=$(sudo -u bitcoin /usr/bin/bitcoin-cli -micro -datadir=/var/lib/bitcoin -conf=/etc/bitcoin.conf -rpcwallet=mining getnewaddress "ckpool")
cat << EOF | sudo tee /etc/ckpool.conf
{
"btcd" : [
$(printf '\t'){
$(printf '\t')"url" : "localhost:19332",
$(printf '\t')"auth" : "satoshi",
$(printf '\t')"pass" : "$(sudo cat /root/rpcpasswd)",
$(printf '\t')"notify" : true
$(printf '\t')}
],
"btcaddress" : "${MININGADDRESS}",
"btcsig" : "${DNS}",
"serverurl" : [
$(printf '\t')"0.0.0.0:3333"
],
"mindiff" : 1,
"startdiff" : 42,
"maxdiff" : 0,
"zmqblock" : "tcp://127.0.0.1:28332",
"logdir" : "/var/log/ckpool"
}
EOF

sudo chown root:ckpool /etc/ckpool.conf
sudo chmod 640 /etc/ckpool.conf

# Reload/Enable System Control for ckpool
sudo systemctl daemon-reload
sudo systemctl enable ckpool

# Configure ckpool's Log Files; Prevents them from Filling up the Partition
cat << EOF | sudo tee /etc/logrotate.d/ckpool
/var/log/ckpool/ckpool.log {
$(printf '\t')create 644 ckpool ckpool
$(printf '\t')daily
$(printf '\t')rotate 14
$(printf '\t')compress
$(printf '\t')delaycompress
$(printf '\t')sharedscripts
}
EOF

# Install the micronode connection and stratum utilities
bash ~/microbank/scripts/pre_fork_micro/mnconnect.sh --install
bash ~/microbank/scripts/pre_fork_micro/poolu.sh --install
bash ~/microbank/scripts/send_messages.sh --install

# Create links (for backup purposes) to all critical files needed to restore this node
cd ~; mkdir backup
sudo ln -s /etc/bitcoin.conf ~/backup
sudo ln -s /etc/ckpool.conf ~/backup
sudo ln -s /root/.ssh/known_hosts ~/backup
sudo ln -s /root/.ssh/p2pkey ~/backup
sudo ln -s /root/.ssh/p2pkey.pub ~/backup
sudo ln -s /etc/default/send_messages.env ~/backup
sudo ln -s /etc/ssh/ssh_host_ed25519_key ~/backup
sudo ln -s /etc/ssh/ssh_host_ed25519_key.pub ~/backup
sudo ln -s /home/stratum/.ssh/authorized_keys ~/backup
sudo ln -s /var/spool/cron/crontabs/satoshi ~/backup
sudo ln -s /var/lib/bitcoin/micro/wallets/mining/wallet.dat ~/backup

# If "~/restore" folder is present then restore all pertinent wallet node files; assumes all files are present
if [[ -d ~/restore ]]; then
    # Restore ownership to files
    sudo chown root:bitcoin ~/restore/bitcoin.conf
    sudo chown root:ckpool ~/restore/ckpool.conf
    sudo chown root:root ~/restore/known_hosts
    sudo chown root:root ~/restore/p2pkey
    sudo chown root:root ~/restore/p2pkey.pub
    sudo chown root:root ~/restore/send_messages.env
    sudo chown root:root ~/restore/ssh_host_ed25519_key
    sudo chown root:root ~/restore/ssh_host_ed25519_key.pub
    sudo chown stratum:stratum ~/restore/authorized_keys
    sudo chown root:root ~/restore/p2pssh@*
    sudo chown -R bitcoin:bitcoin ~/restore/wallet.dat

    # Restore mining wallet and make sure it will load on startup
    sudo systemctl stop bitcoind; echo "Waiting 30 seconds for bitcoind to shutdown..."; sleep 30
    sudo rm -rf /var/lib/bitcoin/micro/wallets
    sudo mkdir -p /var/lib/bitcoin/micro/wallets/mining
    sudo mv -f ~/restore/wallet.dat /var/lib/bitcoin/micro/wallets/mining
    sudo systemctl start bitcoind; echo "Waiting 60 seconds for bitcoind to start..."; sleep 60
    sudo -u bitcoin /usr/bin/bitcoin-cli -micro -datadir=/var/lib/bitcoin -conf=/etc/bitcoin.conf loadwallet mining true

    # Move files to their correct locations
    sudo mv ~/restore/bitcoin.conf /etc/bitcoin.conf
    sudo mv ~/restore/ckpool.conf /etc/ckpool.conf
    sudo mv ~/restore/known_hosts /root/.ssh/known_hosts
    sudo mv ~/restore/p2pkey /root/.ssh/p2pkey
    sudo mv ~/restore/p2pkey.pub /root/.ssh/p2pkey.pub
    sudo mv ~/restore/send_messages.env /etc/default/send_messages.env
    sudo mv ~/restore/ssh_host_ed25519_key /etc/ssh/ssh_host_ed25519_key
    sudo mv ~/restore/ssh_host_ed25519_key.pub /etc/ssh/ssh_host_ed25519_key.pub
    sudo mv ~/restore/authorized_keys /home/stratum/.ssh/authorized_keys
    sudo mv ~/restore/p2pssh@* /etc/default/

    # Add backup links to the restored p2pssh@* files
    sudo ln -s /etc/default/p2pssh@* ~/backup

    # Import Cron jobs
    while read -r line; do
        readLine=$line
        if [[ $readLine == *"/bin/bash"* ]]; then
            (crontab -l | grep -v -F "$readLine"; echo "$readLine") | crontab -
            sleep 3
        fi
    done < ~/restore/satoshi

    # Enable p2pssh service
    sudo systemctl enable $(ls -all /etc/default/p2pssh@* | cut -d "/" -f 4) --now

    # Remove the "~/restore" folder
    cd ~; sudo rm -rf restore
fi

# Restart the machine
sudo reboot now