#!/bin/bash

# Make sure we are not running as root, but that we have sudo privileges.
if [ "$(id -u)" = "0" ]; then
   echo "This script must NOT be run as root (or with sudo)!"
   echo "if you need to create a sudo user (e.g. satoshi), run the following commands:"
   echo "   sudo adduser satoshi"
   echo "   sudo usermod -aG sudo satoshi"
   echo "   sudo su satoshi # Switch to the new user"
   exit 1
elif [ "$(sudo -l | grep '(ALL : ALL) ALL' | wc -l)" = 0 ]; then
   echo "You do not have enough sudo privileges!"
   exit 1
fi
cd ~; sudo pwd # Print Working Directory; have the user enable sudo access if not already.

# Give the user pertinent information about this script and how to use it.?????????????????????????????????????????????????????????????????????????????????????????????
cat << EOF | sudo tee ~/readme.txt
This readme was generated by the "bitcoin_node.sh" install script.
The "bitcoin_node.sh" script installs a bitcoin node readied to receive connections from external services.
To run this script, you'll need the Bitcoin Core download URL (tar.gz file) with its SHA 256 Checksum to continue.
Also, you will need to plug in a USB drive that will be used to backup the "bank" wallet along with the "passphrase"
    STORE IN SAFE & SECURE PLACE WHEN FINISHED!!!
To execute this script, login as a sudo user (that is not root) and execute the following commands:
    sudo apt-get -y install git
    cd ~; git clone https://github.com/satoshiware/microbank
    bash ./microbank/scripts/bitcoin_node.sh
    rm -rf microbank

FYI:
    Use the bitnode utility to see & manage blockchain, wallet, mempool, and mining information as well as make & bump TXs (including importing and loading Satoshi Coins) etc.

    The "$USER/.ssh/authorized_keys" file contains administrator login keys.
    The "ext_rpc/.ssh/authorized_keys" file contains login keys for external services (lightning, electurm, stratum, and btcpay servers).

    The "/var/lib/bitcoin" directory contains debug logs, blockchain, etc.
    The bitcoind's log files can be view with this file: "/var/log/bitcoin/debug.log" (links to /var/lib/bitcoin/debug.log)
    The "/var/lib/bitcoin/wallets" directory contains the various wallet directories.

    Passwords: /root/extrpcpasswd (External; user=ext_rpc), /root/lclrpcpasswd (Localhost; user=local_rpc), /root/strrpcpasswd (Stratum; user=stratum_rpc), and /root/passphrase (Wallet Passphrase)
    External RPC Ports: localhost:8332 (Bitcoin RPC), localhost:8433 (Bitcoin ZMQ)

    Bitcoin configuratijon: /etc/bitcoin.conf

    The "sudo systemctl status bitcoind" command show the status of the bitcoin daemon.

Hardware:
    Rasperry Pi Compute Module 4: CM4008000 (w/ Compute Blade)
    8GB RAM
    M.2 PCI SSD 2TB
    Netgear 5 Port Switch (PoE+ @ 120W)








    # Need to configure the ssh key in the Bitcoin node before we can connect !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    Get SSH Public Key to pass to the Bitcoin Node: sudo cat /root/.ssh/btc-node-autossh-key.pub

ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIUE8MRpzyIjGSg8kZg4ujLHnwHc+av0ejEwf6n8oRBN

    /root/.ssh/known_hosts


EOF
read -p "Press the enter key to continue..."

# Run latest updates and upgrades
sudo apt-get -y update
sudo DEBIAN_FRONTEND=noninteractive apt-get -y install --only-upgrade openssh-server # Upgrade seperatly to ensure non-interactive mode
sudo apt-get -y upgrade

# Install Packages
sudo apt-get -y install wget xz-utils libpq5 autossh

# Load global environment variables
source ~/globals.env

# Download Bitcoin Core, Verify Checksum
sudo wget $BTC_CORE_SOURCE
if ! [ -f ~/${BTC_CORE_SOURCE##*/} ]; then echo "Error: Could not download source!"; exit 1; fi
if [[ ! "$(sha256sum ~/${BTC_CORE_SOURCE##*/})" == *"$BTC_CORE_CHECKSUM"* ]]; then
    echo "Error: SHA 256 Checksum for file \"~/${BTC_CORE_SOURCE##*/}\" was not what was expected!"
    exit 1
fi
sudo tar -xzf ${BTC_CORE_SOURCE##*/}
sudo rm ${BTC_CORE_SOURCE##*/}

# Install bitcoin-cli
sudo install -m 0755 -o root -g root -t /usr/bin bitcoin-*/bin/bitcoin-cli
sudo rm -rf bitcoin-*

# Generate public/private keys (non-encrytped)
sudo ssh-keygen -t ed25519 -f /root/.ssh/btc-node-autossh-key -N "" -C "" ############################################################################ We could pause here for a moment, or we need to recommend a restart??? or something

# Create/Update known_hosts file with host key from the Bitcoin Node
sudo touch /root/.ssh/known_hosts
HOSTSIG=$(ssh-keyscan -p 22 -H btc-node.local) # !!!!!!!!!!!!!!!!!!!!!!!!!!! btc-node.local !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! do we want to stick with that name???????????
echo "${HOSTSIG} # BTC NODE HOST KEY" | sudo tee -a /root/.ssh/known_hosts

# Create systemd service file for "Bitcoin Node Auto SSH Connection"  !!!!!!!!!!!!!!!!!!!!!!!!!!! btc-node.local !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! do we want to stick with that name???????????
cat << EOF | sudo tee /etc/systemd/system/btc-node-autossh.service
[Unit]
Description=Bitcoin Node Auto SSH Connection
Before=lightningd.service
After=network-online.target

[Service]
Environment="AUTOSSH_GATETIME=0"
ExecStart=/usr/bin/autossh -M 0 -NT -o ServerAliveInterval=30 -o ExitOnForwardFailure=yes -o "ServerAliveCountMax 3" -i /root/.ssh/btc-node-autossh-key -L 8332:localhost:8332 -p 22 btc-remote-cli@btc-node.local

RestartSec=5
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# Download Core Lightning, Verify Checksum, and Install
cat << EOF
See list of Core Lightning Releases @ https://github.com/ElementsProject/lightning/releases
The latest releases as of 12/12/2024 listed below:

# clightning-v24.11, amd64 (Ubuntu-20.04)
    https://github.com/ElementsProject/lightning/releases/download/v24.11/clightning-v24.11-Ubuntu-20.04-amd64.tar.xz
    13815e0b5db15631a3002176dcf3cf873fa065cb261408e1f0aff015928a18bf

# clightning-v24.11, amd64 (Ubuntu-22.04)
    https://github.com/ElementsProject/lightning/releases/download/v24.11/clightning-v24.11-Ubuntu-22.04-amd64.tar.xz
    38d3644bbd5b336d0541e3a7c6cd07278404da824471217bd5498b86a98d56d7

# clightning-v24.11, amd64 (Ubuntu-24.04)
    # NOTE: TOO ADVANCED FOR THE LATEST DEBIAN VERSION (BOOKWORM)
    # https://github.com/ElementsProject/lightning/releases/download/v24.11/clightning-v24.11-Ubuntu-24.04-amd64.tar.xz
    # 91246dabe5fa1b4b1dabd1f29e0e817bc6dc06d9f7a83e5c324e0f0c77122401
EOF
read -p "Core Lightning URL (.tar.xz) source: " SOURCE
read -p "SHA 256 Checksum for the .tar.xz source file: " CHECKSUM

sudo wget $SOURCE
if ! [ -f ~/${SOURCE##*/} ]; then echo "Error: Could not download source!"; exit 1; fi
if [[ ! "$(sha256sum ~/${SOURCE##*/})" == *"$CHECKSUM"* ]]; then
    echo "Error: SHA 256 Checksum for file \"~/${SOURCE##*/}\" was not what was expected!"
    exit 1
fi
sudo tar -xvf ${SOURCE##*/} -C /usr/local --strip-components=2
rm ${SOURCE##*/}

# Create lightning System User
sudo useradd --system --shell=/sbin/nologin lightning

# Create lightning directory
sudo mkdir -p /var/lib/lightningd
sudo chown root:lightning -R /var/lib/lightningd
sudo chmod 670 -R /var/lib/lightningd

# Prepare Service Configuration
cat << EOF | sudo tee /etc/systemd/system/lightningd.service
[Unit]
Description=Core Lightning Daemon
Wants=network-online.target
After=network-online.target
After=btc-node-autossh.service

[Service]
ExecStart=/usr/local/bin/lightningd --conf /etc/lightningd.conf --lightning-dir /var/lib/lightningd --pid-file /run/lightningd/lightningd.pid

Type=simple
PIDFile=/run/lightningd/lightningd.pid
Restart=on-failure

### Creates /run/lightningd owned by lightning ###
RuntimeDirectory=lightningd

### Run as lightning:lightning ###
User=lightning
Group=lightning

### Hardening Measures ###
PrivateTmp=true
ProtectSystem=full
NoNewPrivileges=true
PrivateDevices=true
MemoryDenyWriteExecute=true

[Install]
WantedBy=multi-user.target
EOF

# Generate Core Lightning Configuration File with the Appropriate Permissions
cat << EOF | sudo tee /etc/lightningd.conf
#--bitcoin-datadir <arg>                           -datadir arg for bitcoin-cli
#--bitcoin-cli <arg>                               bitcoin-cli pathname
#--bitcoin-rpcuser <arg>                           bitcoind RPC username
#--bitcoin-rpcpassword <arg>                       bitcoind RPC password
#--bitcoin-rpcconnect <arg>                        bitcoind RPC host to connect to
#--bitcoin-rpcport <arg>                           bitcoind RPC host's port
#echo "alias btc=\"sudo -u bitcoin /usr/bin/bitcoin-cli -micro -datadir=/var/lib/bitcoin -conf=/etc/bitcoin.conf\"" | sudo tee -a /etc/bash.bashrc # Reestablish alias @ boot

# bitcoind RPC username
bitcoin-rpcuser=satoshi

# bitcoind RPC password
bitcoin-rpcpassword=satoshi

# bitcoind RPC host to connect to
bitcoin-rpcconnect=btc-node.local

# bitcoind RPC host's port
bitcoin-rpcport=8332

# Give your node a name
#alias=<NAME>

# Pick your favorite color as a hex code
#rgb=FFA500

# Set the network for Core Lightning
network=bitcoin

# Run `lightningd` as a background daemon
daemon

## Log output to specified file
log-file=/var/log/lightningd/log

# Set to debug for more verbose log output
#log-level=debug

## Password encrypt your `hsm_secret` ???????????????????????????????????????????????????????????????????????????????????
## You must supply the password on startup if you choose to do this
#encrypted-hsm

### Networking Settings ###
# Inbound Connections (default PORT 9735)
#addr=0.0.0.0

# Peers can find your node here ????????????????????????????????????????
#announce-addr=<IP/TOR ADDRESS>:9735

## Bind Core Lightning RPC server to localhost PORT 9734 ?????????????????????????
#bind-addr=127.0.0.1:9734

## Configure proxy/tor for OUTBOUND connections.
#proxy=127.0.0.1:9050

## Force all outbound connections through the proxy/tor
#always-use-proxy=false

### Channel Settings ###
##
#                     Channel Settings
# !! Please read the manual before editing these !!
# !!  and for a full list of available options   !!
##

## Removes capacity limit for channel creation
#large-channels

## Base fee to charge for every payment which passes through in MILLISATOSHI (1/1000 of a satoshi)
#fee-base=1000

## In millionths (10 is 0.001%, 100 is 0.01%, 1000 is 0.1% etc.)
#fee-per-satoshi=10

## Minimum value, in SATOSHI, to accept for channel open requests
#min-capacity-sat=10000

## Sets the minimum HTLC value for new channels
#htlc-minimum-msat=0

## Blockchain confirmations required for channel to be considered valid
#funding-confirms=3

## Max number of HTLC channels can handle in each direction
#max-concurrent-htlcs=30

##
#                   Plugins
#  Plugins allow you to extend Core Lightnings functionality
#   For a community curated list of available plugins visit:
#         "https://github.com/lightningd/plugins"
##

## Load your plugins from a directory
#plugin-dir=/path/to/your/.lightning/plugins

## Load plugins individually
#plugin=path/to/plugin
EOF
sudo chown root:lightning /etc/lightningd.conf
sudo chmod 640 /etc/lightningd.conf

# Create lightningd log file location /w appropriate permissions
sudo mkdir -p /var/log/lightningd
sudo chown root:lightning -R /var/log/lightningd
sudo chmod 670 -R /var/log/lightningd

# Configure lightningd's Log file from Filling up the partition ???????????????????????????killall???????????????
cat << EOF | sudo tee /etc/logrotate.d/lightningd
/var/log/lightningd/log {
$(printf '\t')create 660 root lightning
$(printf '\t')daily
$(printf '\t')rotate 14
$(printf '\t')compress
$(printf '\t')delaycompress
$(printf '\t')sharedscripts
$(printf '\t')postrotate
$(printf '\t')$(printf '\t')killall -HUP lightningd
$(printf '\t')endscript
}
EOF

# Reload/Enable System Control for new processes
sudo systemctl daemon-reload
sudo systemctl enable lightningd --now
sudo systemctl enable btc-node-autossh.service --now



































# Generate Strong Bitcoin RPC Passwords. Replace '/' characters with '0', Replace '+' characters with '1', and Replace '=' characters with ''
EXTRPCPASSWD=$(openssl rand -base64 16); EXTRPCPASSWD=${EXTRPCPASSWD//\//0}; EXTRPCPASSWD=${EXTRPCPASSWD//+/1}; EXTRPCPASSWD=${EXTRPCPASSWD//=/} # External RPC
LCLRPCPASSWD=$(openssl rand -base64 16); LCLRPCPASSWD=${LCLRPCPASSWD//\//0}; LCLRPCPASSWD=${LCLRPCPASSWD//+/1}; LCLRPCPASSWD=${LCLRPCPASSWD//=/} # Localhost RPC
echo $EXTRPCPASSWD | sudo tee /root/extrpcpasswd
echo $LCLRPCPASSWD | sudo tee /root/lclrpcpasswd
sudo chmod 400 /root/extrpcpasswd
sudo chmod 400 /root/lclrpcpasswd







# Install/Setup/Enable the Uncomplicated Firewall (UFW)
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh # Open Default SSH Port
sudo ufw allow 8333 # Open port for p2p Bitcoin mainnet
sudo ufw --force enable # Enable Firewall @ Boot and Start it now!

# Install/Setup/Enable SSH(D)
sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config # Disable password login
sudo sed -i 's/X11Forwarding yes/#X11Forwarding no/g' /etc/ssh/sshd_config # Disable X11Forwarding (default value)
sudo sed -i 's/#AllowTcpForwarding yes/AllowTcpForwarding Local/g' /etc/ssh/sshd_config # Only allow local port forwarding
sudo sed -i 's/#.*StrictHostKeyChecking ask/\ \ \ \ StrictHostKeyChecking yes/g' /etc/ssh/ssh_config # Enable strict host verification

echo -e "\nMatch User *,"'!'"ext_rpc,"'!'"root,"'!'"$USER" | sudo tee -a /etc/ssh/sshd_config
echo -e "\tAllowTCPForwarding no" | sudo tee -a /etc/ssh/sshd_config
echo -e "\tPermitTTY no" | sudo tee -a /etc/ssh/sshd_config
echo -e "\tForceCommand /usr/sbin/nologin" | sudo tee -a /etc/ssh/sshd_config

echo -e "\nMatch User ext_rpc" | sudo tee -a /etc/ssh/sshd_config
echo -e "\tPermitTTY no" | sudo tee -a /etc/ssh/sshd_config
echo -e "\tPermitOpen localhost:8332 localhost:8433" | sudo tee -a /etc/ssh/sshd_config # Denies any request of local forwarding besides localhost:8332 (Bitcoin RPC), and localhost:8433 (Bitcoin ZMQ)

# Setup a "no login" users called "ext_rpc"
sudo useradd -s /bin/false -m -d /home/ext_rpc ext_rpc

# Create .ssh folder (ext_rpc); Set ownership and permissions
sudo mkdir -p /home/ext_rpc/.ssh
sudo touch /home/ext_rpc/.ssh/authorized_keys
sudo chown -R ext_rpc:ext_rpc /home/ext_rpc/.ssh
sudo chmod 700 /home/ext_rpc/.ssh
sudo chmod 600 /home/ext_rpc/.ssh/authorized_keys

# Generating Strong Wallet Passphrase
STRONGPASSPF=$(openssl rand -base64 24)
STRONGPASSPF=${STRONGPASSPF//\//0} # Replace '/' characters with '0'
STRONGPASSPF=${STRONGPASSPF//+/1} # Replace '+' characters with '1'
STRONGPASSPF=${STRONGPASSPF//=/} # Replace '=' characters with ''
STRONGPASSPF=${STRONGPASSPF//O/0} # Replace 'O' (o) characters with '0'
STRONGPASSPF=${STRONGPASSPF//l/1} # Replace 'l' (L) characters with '1'
echo $STRONGPASSPF | sudo tee /root/passphrase
sudo chmod 400 /root/passphrase

# Generate "bank" Wallet
sudo -u bitcoin /usr/bin/bitcoin-cli -datadir=/var/lib/bitcoin -conf=/etc/bitcoin.conf --named createwallet wallet_name="bank" passphrase=$(sudo cat /root/passphrase) load_on_startup=true

# Backup Wallets
sudo mkdir -p /media/usb
sudo mount /dev/sda1 /media/usb
sudo install -C -m 400 /var/lib/bitcoin/wallets/bank/wallet.dat /media/usb/bank.dat
sudo install -C -m 400 /root/passphrase /media/usb/passphrase
sudo umount /dev/sda1
sudo rm -rf /media/usb

# Create Aliases to lock and unlocks (24 Hours) wallets
echo "alias unlockwallets=\"btc -rpcwallet=bank walletpassphrase \\\$(sudo cat /root/passphrase) 86400\"" | sudo tee -a /etc/bash.bashrc
echo "alias lockwallets=\"btc -rpcwallet=bank walletlock\"" | sudo tee -a /etc/bash.bashrc

# Install the "bitnode" utility (bitnode.sh)
bash ~/microbank/scripts/bitnode.sh -i

# Restart the machine
sudo reboot now





2024-12-12T23:25:50.487Z INFO    lightningd: v24.11
2024-12-12T23:25:50.514Z INFO    lightningd: Creating configuration directory /root/.lightning/bitcoin
2024-12-12T23:25:50.551Z INFO    plugin-clnrest: Killing plugin: disabled itself: No module named 'gevent'
2024-12-12T23:25:50.552Z INFO    plugin-wss-proxy: Killing plugin: disabled itself: No module named 'websockets'
2024-12-12T23:25:50.552Z UNUSUAL plugin-bookkeeper: topic 'utxo_deposit' is not a known notification topic
2024-12-12T23:25:50.552Z UNUSUAL plugin-bookkeeper: topic 'utxo_spend' is not a known notification topic
Usage: lightningd

--list-features-only                              List the features configured, and exit immediately
--developer                                       Enable developer commands/options, disable legacy APIs
--conf=<file>                                     Specify configuration file
--lightning-dir=<dir>                             Set base directory: network-specific subdirectory is under here (default: "/root/.lightning")

--network <arg>                                   Select the network parameters (bitcoin, testnet, signet, regtest, litecoin or litecoin-testnet) (default: bitcoin)
--testnet                                         Alias for --network=testnet
--signet                                          Alias for --network=signet
--mainnet                                         Alias for --network=bitcoin
--regtest                                         Alias for --network=regtest

--version|-V                                      Print version and exit
--rpc-file <arg>                                  Set JSON-RPC socket (or /dev/tty) (default: "lightning-rpc")
--test-daemons-only                               Test that subdaemons can be run, then exit immediately
--allow-deprecated-apis <arg>                     Enable deprecated options, JSONRPC commands, fields, etc. (default: true)
--plugin <arg>                                    Add a plugin to be run (can be used multiple times)
--plugin-dir <arg>                                Add a directory to load plugins from (can be used multiple times)
--clear-plugins                                   Remove all plugins added before this option
--disable-plugin <arg>                            Disable a particular plugin by filename/name
--important-plugin <arg>                          Add an important plugin to be run (can be used multiple times). Die if the plugin dies.
--always-use-proxy <arg>                          Use the proxy always (default: false)

--daemon                                          Run in the background, suppress stdout/stderr
--wallet <arg>                                    Location of the wallet database.
--recover <arg>                                   Populate hsm_secret with the given codex32 secret and starts the node in `offline` mode.
--experimental-dual-fund                          experimental: Advertise dual-funding and allow peers to establish channels via v2 channel open protocol.
--experimental-splicing                           experimental: Enables the ability to resize channels using splicing
--experimental-shutdown-wrong-funding             EXPERIMENTAL: allow shutdown with alternate txids
--experimental-peer-storage                       EXPERIMENTAL: enable peer backup storage and restore
--experimental-quiesce                            experimental: Advertise ability to quiesce channels.
--help|-h                                         Print this message.

--rgb <arg>                                       RRGGBB hex color for node
--alias <arg>                                     Up to 32-byte alias for node
--pid-file=<file>                                 Specify pid file (default: "/root/.lightning/lightningd-bitcoin.pid")
--ignore-fee-limits <arg>                         (DANGEROUS) allow peer to set any feerate (default: false)
--watchtime-blocks <arg>                          Blocks before peer can unilaterally spend funds (default: 144)
--funding-confirms <arg>                          Confirmations required for funding transaction (default: 3)
--require-confirmed-inputs <arg>                  Confirmations required for inputs to funding transaction (v2 opens only) (default: false)
--cltv-delta <arg>                                Number of blocks for cltv_expiry_delta (default: 34)
--cltv-final <arg>                                Number of blocks for final cltv_expiry (default: 18)
--commit-time=<millseconds>                       Time after changes before sending out COMMIT (default: 10)
--fee-base <arg>                                  Millisatoshi minimum to charge for HTLC (default: 1000)
--rescan <arg>                                    Number of blocks to rescan from the current head, or absolute blockheight if negative (default: 15)
--fee-per-satoshi <arg>                           Microsatoshi fee for every satoshi in HTLC (default: 10)
--htlc-minimum-msat <arg>                         The default minimal value an HTLC must carry in order to be forwardable for new channels (default: 0)
--htlc-maximum-msat <arg>                         The default maximal value an HTLC must carry in order to be forwardable for new channel (default: 18446744073709551615)
--max-concurrent-htlcs <arg>                      Number of HTLCs one channel can handle concurrently. Should be between 1 and 483 (default: 30)
--max-dust-htlc-exposure-msat <arg>               Max HTLC amount that can be trimmed (default: 50000000)
--min-capacity-sat <arg>                          Minimum capacity in satoshis for accepting channels (default: 10000)

--addr <arg>                                      Set an IP address (v4 or v6) to listen on and announce to the network for incoming connections
--bind-addr <arg>                                 Set an IP address (v4 or v6) to listen on, but not announce
--announce-addr <arg>                             Set an IP address (v4 or v6) or .onion v3 to announce, but not listen on
--announce-addr-discovered <arg>                  Explicitly turns IP discovery 'on' or 'off'. (default: auto)
--announce-addr-discovered-port <arg>             Sets the public TCP port to use for announcing discovered IPs. (default: 9735)
--offline                                         Start in offline-mode (do not automatically reconnect and do not accept incoming connections)
--autolisten <arg>                                If true, listen on default port and announce if it seems to be a public interface (default: true)
--proxy <arg>                                     Set a socks v5 proxy IP address and port
--tor-service-password <arg>                      Set a Tor hidden service password
--accept-htlc-tlv-type <arg>                      HTLC TLV type to accept (can be used multiple times)
--disable-dns                                     Disable DNS lookups of peers
--encrypted-hsm                                   Set the password to encrypt hsm_secret with. If no password is passed through command line, you will be prompted to enter it.
--rpc-file-mode <arg>                             Set the file mode (permissions) for the JSON-RPC socket (default: 0600)
--force-feerates <arg>                            Set testnet/regtest feerates in sats perkw, opening/mutual_close/unlateral_close/delayed_to_us/htlc_resolution/penalty: if fewer specified, last number applies
                                                  to remainder
--commit-fee <arg>                                Percentage of fee to request for their commitment (default: 100)
--commit-feerate-offset <arg>                     Additional feerate per kw to apply to feerate updates as the channel opener (default: 5)
--min-emergency-msat <arg>                        Amount to leave in wallet for spending anchor closes (default: 25000000)
--subdaemon <arg>                                 Arg specified as SUBDAEMON:PATH. Specifies an alternate subdaemon binary. If the supplied path is relative the subdaemon binary is found in the working
                                                  directory. This option may be specified multiple times. For example, --subdaemon=hsmd:remote_signer would use a hypothetical remote signing subdaemon.
--experimental-upgrade-protocol                   experimental: allow channel types to be upgraded on reconnect
--invoices-onchain-fallback                       Include an onchain address in invoices and mark them as paid if payment is received on-chain
--database-upgrade <arg>                          Set to true to allow database upgrades even on non-final releases (WARNING: you won't be able to downgrade!)
--i-promise-to-fix-broken-api-user <arg>          Re-enable a long-deprecated API (which will be removed entirely next version!)



--log-level <arg>                                 log level (io, debug, info, unusual, broken) [:prefix] (default: info)
--log-timestamps <arg>                            prefix log messages with timestamp (default: true)
--log-prefix <arg>                                log prefix
--log-file=<file>                                 Also log to file (- for stdout)





--dev-debugger=<subprocess>                       Invoke gdb at start of <subprocess>
--dev-no-plugin-checksum                          Don't checksum plugins to detect changes
--dev-builtin-plugins-unimportant                 Make builtin plugins unimportant so you can plugin stop them.
--dev-no-reconnect                                Disable automatic reconnect-attempts by this node, but accept incoming
--dev-no-reconnect-private                        Disable automatic reconnect-attempts to peers with private channel(s) only, but accept incoming
--dev-fast-reconnect                              Make max default reconnect delay 3 (not 300) seconds
--dev-disconnect=<filename>                       File containing disconnection points
--dev-allow-localhost                             Announce and allow announcments for localhost address
--dev-bitcoind-poll <arg>                         Time between polling for new transactions (default: 30)
--dev-fast-gossip                                 Make gossip broadcast 1 second, etc
--dev-fast-gossip-prune                           Make gossip pruning 120 seconds
--dev-gossip-time <arg>                           UNIX time to override gossipd to use. (default: 0)
--dev-force-privkey <arg>                         Force HSM to use this as node private key
--dev-force-bip32-seed <arg>                      Force HSM to use this as bip32 seed
--dev-force-channel-secrets <arg>                 Force HSM to use these for all per-channel secrets
--dev-max-funding-unconfirmed-blocks <arg>        Maximum number of blocks we wait for a channel funding transaction to confirm, if we are the fundee. (default: 2016)
--dev-force-tmp-channel-id <arg>                  Force the temporary channel id, instead of random
--dev-no-htlc-timeout                             Don't kill channeld if HTLCs not confirmed within 30 seconds
--dev-fail-process-onionpacket                    Force all processing of onion packets to fail
--dev-no-version-checks                           Skip calling subdaemons with --version on startup
--dev-force-features <arg>                        Force the init/globalinit/node_announce/channel/bolt11/ features, each comma-separated bitnumbers OR a single +/-<bitnumber>
--dev-timeout-secs <arg>                          Seconds to timeout if we don't receive INIT from peer (default: 60)
--dev-no-modern-onion                             Ignore modern onion messages
--dev-disable-commit-after <arg>                  Disable commit timer after this many commits (default: -1)
--dev-no-ping-timer                               Don't hang up if we don't get a ping response
--dev-onion-reply-length <arg>                    Send onion errors of custom length (default: 256)
--dev-max-fee-multiplier <arg>                    Allow the fee proposed by the remote end to be up to multiplier times higher than our own. Small values will cause channels to be closed more often due to fee fluctuations, large values may result in large fees. (default: 10)
--dev-allowdustreserve <arg>                      If true, we allow the `fundchannel` RPC command and the `openchannel` plugin hook to set a reserve that is below the dust limit. (default: false)
--dev-any-channel-type                            Allow sending any channel type, and accept any
--dev-allow-shutdown-destination-change           Allow destination override on close, even if risky
--dev-hsmd-no-preapprove-check                    Tell hsmd not to support preapprove_check msgs
--dev-hsmd-fail-preapprove                        Tell hsmd to always deny preapprove_invoice / preapprove_keysend
--dev-fd-limit-multiplier <arg>                   Try to set fd limit to this many times by number of channels (default: 2) (default: 2)
--dev-handshake-no-reply                          Don't send or read init message after connection
--dev-strict-forwarding                           Forward HTLCs along the channel specified
--dev-throttle-gossip                             Throttle gossip right down, for testing
--dev-limit-connections-inflight                  Throttle connection limiting down for testing.
--dev-low-prio-anchor-blocks <arg>                How many blocks to aim for low-priority anchor closes (default: 2016) (default: 2016)
--dev-debug-self                                  Fire up a terminal window with a debugger in it on initialization

--autoconnect-seeker-peers <arg>                  Seeker autoconnects to maintain this minimum number of gossip peers (default: 10)

#--bitcoin-datadir <arg>                           -datadir arg for bitcoin-cli
#--bitcoin-cli <arg>                               bitcoin-cli pathname
--bitcoin-rpcuser <arg>                           bitcoind RPC username
--bitcoin-rpcpassword <arg>                       bitcoind RPC password
--bitcoin-rpcconnect <arg>                        bitcoind RPC host to connect to
#--bitcoin-rpcport <arg>                           bitcoind RPC host's port
#--bitcoin-rpcclienttimeout <arg>                  bitcoind RPC timeout in seconds during HTTP requests (default: 60)
#--bitcoin-retry-timeout <arg>                     how long to keep retrying to contact bitcoind before fatally exiting (default: 60)



--autoclean-cycle <arg>                           Perform cleanup every given seconds (default: 3600)
--autoclean-succeededforwards-age <arg>           How old do successful forwards have to be before deletion (0 = never)
--autoclean-failedforwards-age <arg>              How old do failed forwards have to be before deletion (0 = never)
--autoclean-succeededpays-age <arg>               How old do successful pays have to be before deletion (0 = never)
--autoclean-failedpays-age <arg>                  How old do failed pays have to be before deletion (0 = never)
--autoclean-paidinvoices-age <arg>                How old do paid invoices have to be before deletion (0 = never)
--autoclean-expiredinvoices-age <arg>             How old do expired invoices have to be before deletion (0 = never)



--funder-policy <arg>                             Policy to use for dual-funding requests. [match, available, fixed] (default: fixed)
--funder-policy-mod <arg>                         Percent to apply policy at (match/available); or amount to fund (fixed) (default: 0)
--funder-min-their-funding <arg>                  Minimum funding peer must open with to activate our policy (default: 10000sat)
--funder-max-their-funding <arg>                  Maximum funding peer may open with to activate our policy (default: 4294967295sat)
--funder-per-channel-min <arg>                    Minimum funding we'll add to a channel. If we can't meet this, we don't fund (default: 10000sat)
--funder-per-channel-max <arg>                    Maximum funding we'll add to a channel. We cap all contributions to this (default: 4294967295sat)
--funder-reserve-tank <arg>                       Amount of funds we'll always leave available. (default: 0sat)
--funder-fuzz-percent <arg>                       Percent to fuzz the policy contribution by. Defaults to 0%. Max is 100% (default: 0)
--funder-fund-probability <arg>                   Percent of requests to consider. Defaults to 100%. Setting to 0% will disable dual-funding (default: 100)
--funder-lease-requests-only <arg>                Only fund lease requests. Defaults to true if channel lease rates are being advertised (default: true)



--lease-fee-base-sat <arg>                        Channel lease rates, base fee for leased funds, in satoshi.
--lease-fee-basis <arg>                           Channel lease rates, basis charged for leased funds (per 10,000 satoshi.)
--lease-funding-weight <arg>                      Channel lease rates, weight we'll ask opening peer to pay for in funding transaction
--channel-fee-max-base-msat <arg>                 Channel lease rates, maximum channel fee base we'll charge for funds routed through a leased channel.
--channel-fee-max-proportional-thousandths <arg>  Channel lease rates, maximum proportional fee (in thousandths, or ppt) we'll charge for funds routed through a leased channel. Note: 1ppt = 1,000ppm
--fetchinvoice-noconnect                          Don't try to connect directly to fetch/pay an invoice.
--renepay-debug-mcf                               Enable renepay MCF debug info.
--renepay-debug-payflow                           Enable renepay payment flows debug info.
--xpay-handle-pay <arg>                           Make xpay take over pay commands it can handle. (default: false)
--exposesecret-passphrase <arg>                   Enable exposesecret command to allow HSM Secret backup, with this passphrase

--disable-mpp                                     Disable multi-part payments.


--bookkeeper-dir <arg>                            Location for bookkeeper records.
--bookkeeper-db <arg>                             Location of the bookkeeper database


--grpc-host <arg>                                 Which host should the grpc listen for incomming connections? (default: 127.0.0.1)
--grpc-msg-buffer-size <arg>                      Number of notifications which can be stored in the grpc message buffer. Notifications can be skipped if this buffer is full (default: 1024)
--grpc-port <arg>                                 Which port should the grpc plugin listen for incoming connections? (default: 9736)

