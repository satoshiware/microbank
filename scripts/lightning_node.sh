#!/bin/bash

# Make sure we are not running as root, but that we have sudo privileges.
if [ "$(id -u)" = "0" ]; then
   echo "This script must NOT be run as root (or with sudo)!"
   echo "if you need to create a sudo user (e.g. satoshi), run the following commands:"
   echo "   sudo adduser satoshi"
   echo "   sudo usermod -aG sudo satoshi"
   echo "   sudo su satoshi # Switch to the new user"
   exit 1
elif [ "$(sudo -l | grep '(ALL : ALL) ALL' | wc -l)" = 0 ]; then
   echo "You do not have enough sudo privileges!"
   exit 1
fi
cd ~; sudo pwd # Print Working Directory; have the user enable sudo access if not already.

# Give the user pertinent information about this script and how to use it.
cat << EOF | sudo tee ~/readme.txt
This readme was generated by the "lightning_node.sh" install script.

This is the main lightning node for this bank. It is not used to send or receive lightning payments (except for rebalancing
efforts). It's primarily used to make and manage all the channel connections (external connections for global liquidity,
connections with trusted peer banks, and private internal [hosted] connections) as well as manage their balances so
good-sized payments can flow in either direction. THE "litu" UTILITY IS AVAILABLE TO AID IN ALL the activities mentioned
above.

Network & Post Configuration:
    Setup a static ipv4 and port forwarding (external port 9735) on your NAT firewall to the local port 9735.
    IMPORTANT! Be sure to use the "litu" utility to update the external ipv4 address if it changes.
    litu --generate # (Re)Generate(s) the environment file (w/ needed constants) for the litu utility
    send_messages --generate # (Re)Generate(s) the environment file (w/ needed constants) for the send_messages utility

Global Liquidity:
    Create unsolicited one-way channels (no leased funds; we're the only funder) to well-connected nodes
    Select nodes that can EASILY help with inbound liquidity (e.g. wallet, exchange nodes, etc.)
    Start with a few channels and add more as needed (avoid adding channels if pre existing ones are underutilized)
    The minimum amount required to establish a channel is different for each node.
    When establishing these channels, will use all the defaults except for the reserve requirement (it'll be 0).

    Channel Balancing via Dynamic Fee Management: In order to maintain the best global liquidity / connectivity,
    the fees are only a hair above zero; however, as more channels are established with significant daily throughput,
    it may be wise to employ some plugin (in the future) to dynamically adjust the "fee-per-satoshi" on specific
    "global" channels to encourage the use of other "global" channels. NOTE: FEES ONLY APPLY TO PAYMENTS ROUTED IN (NOT OUT).

    Here are some potential nodes that consist of well-known bitcoin services, Lightning Wallets, reliable exchanges, etc. (last update: 12/21/2024):
        03c8e5f583585cac1de2b7503a6ccd3c12ba477cfd139cd4905be504c2f48e86bd  # Strike
        02f1a8c87607f415c8f22c00593002775941dea48869ce23096af27b0cfdcc0b69  # Kraken
        035e4ff418fc8b5554c5d9eea66396c227bd429a3251c8cbc711002ba215bfc226  # Wallet of Satoshi
        03037dc08e9ac63b82581f79b662a4d0ceca8a8ca162b1af3551595b8f2d97b70a  # River Financial #1
        03aab7e9327716ee946b8fbfae039b0db85356549e72c5cca113ea67893d0821e5  # River Financial #2
        033d8656219478701227199cbd6f670335c8d408a92ae88b962c49d4dc0e83e025  # Bitfinex #1
        03cde60a6323f7122d5178255766e38114b4722ede08f7c9e0c5df9b912cc201d6  # Bitfinex #2
        02535215135eb832df0f9858ff775bd4ae0b8911c59e2828ff7d03b535b333e149  # Binance #1
        02b2ae15001601b74eee8ddbd036315c5fbd415b24f88f24d5266820169dfd13de  # Binance #2
        037659a0ac8eb3b8d0a720114efc861d3a940382dcfa1403746b4f8f6b2e8810ba  # Nicehash #1
        02542b74385b4965bf6b5616a0eaafee06b58ac62e3d441fdb2380a92ded3cf124  # Nicehash #2
        0294ac3e099def03c12a37e30fe5364b1223fd60069869142ef96580c8439c2e0a  # okx
        030c3f19d742ca294a55c00376b3b355c3c90d61c6b6b39554dbc7ac19b141c14f  # Bitrefill
        03864ef025fde8fb587d989186ce6a4a186895ee44a926bfc370e2c366597a3f8f  # ACINQ (Eclair Implementation)
        039174f846626c6053ba80f5443d0db33da384f1dde135bf7080ba1eec465019c3  # Lightspark (Coinbase) #1
        02a98e8c590a1b5602049d6b21d8f4c8861970aa310762f42eae1b2be88372e924  # Lightspark (Coinbase) #2
        02d0e03736cbfc73f3c005bc3770327df0e84bd69bc8e557c279887344deb8bce2  # Blockstream (PeerSwap)
        02df5ffe895c778e10f7742a6c5b8a0cefbe9465df58b92fadeb883752c8107c8f  # Blockstream (Store)

Incoming (Unsolicited) Channels:
    Someone's using our node to bootstrap themselves into the lightning network. How flattering! NOTE: THIS NODE
    REQUIRES 1 MILLION \$ATS FOR INCOMING CHANNELS! The management or maintenance of these channels (e.g. balancing) is
    left to the funders (aka the creators). CORE LIGHTNING FEATURE REQUEST: Require a set amount to be pushed to this
    node (i.e. donated) when opening a channel to cover any potential loss from paying fees for extra utxos and/or any
    satoshis lost to fees because of dust limits.

    If a channel becomes unresponsive for more than 14 days or if the fees (or other settings) become too unreasonable,
    then the operator may close all channels with that peer! Fees should be increased from their default (near zero)
    values on these incoming channels. When setting or changing a fee, consider making changes gradually, consider the
    peer's fees on the given channel, consider the fees on the peer's other (competing) channels, and consider our
    node's liquidity needs both incoming and outgoing.

    Note: These "policies" are not enforced in code (yet), they are simply suggested here and then executed manually.

Local (Trusted) Channels:
    Channels created between TRUSTED "banking" peers are treated differently. The fees are always kept a hair above zero
    and both parties create channels (of equal size), with the default "feerate", that are meant to be open indefinitely
    with zero reserve. This is a demonstration of long-term relationship commitment. NOTE: THIS NODE REQUIRES 1 MILLION
    \$ATS FOR INCOMING CHANNELS! (This would be a good candidate for "Dual Funded V2 Channels", but we opted for the
    simple single funder [for now]). Additional channels are opened (and/or closed) by either party as needed. To
    maintain balanced channels beyond well-known strategies in the lightning network, either "bank" can just leverage
    the tools offered by the other.

Private Channels:
    All other lightning services (e.g. btcpay, mobile lightning wallet service, etc.) provided by this bank are connected
    to this node via a single private (or hosted) channel. (hosted channels do not require any bitcoins!). These private
    channels also make it easier to control fees for the various services we provide.

Upgrading Core Lightning:
    Upgrading your Core Lightning node is the same as installing it. Download the latest binary in the same directory as
    before. Example:
        sudo systemctl disable lightningd
        lncli stop
        LIGHTNING_CORE_SOURCE="https://github.com/ElementsProject/lightning/releases/download/v24.11/clightning-v24.11-Ubuntu-22.04-amd64.tar.xz"
        LIGHTNING_CORE_CHECKSUM="38d3644bbd5b336d0541e3a7c6cd07278404da824471217bd5498b86a98d56d7"
        cd ~; sudo wget \$LIGHTNING_CORE_SOURCE # Download Core Lightning Binaries
        sha256sum ~/\${LIGHTNING_CORE_SOURCE##*/} # Verify Checksum Matches
        sudo tar -xvf \${LIGHTNING_CORE_SOURCE##*/} -C /usr/local --strip-components=2 # Install binaries in the appropriate directory
        sudo rm \${LIGHTNING_CORE_SOURCE##*/} # Clean up.
        sudo systemctl enable lightningd --now

Backup/Restore:
    WARNING! If you intend to backup/resotre the lightningd database, know that snapshot-style backups of the lightningd database is discouraged,
    as any loss of state may result in permanent loss of funds! If you are to continue, first disable and stop (i.e. shutdown) lightningd:
        sudo systemctl disable lightningd
        sudo systemctl stop lightningd
    Then make sure the files "lightningd.sqlite3" and "lightningd.sqlite3.backup" appear the same (time & date) in "/var/lib/lightningd/bitcoin/":
    IMPORTANT! Be sure to run the backup script one last time to capture the latest database changes (if any) and then continue as normal as with
    any other backup and restore process.

Files:
    /etc/bitcoin.conf # Bitcoin Configureation File
    /etc/lightningd.conf # Core Lightningd Configureation File
    /var/lib/bitcoin # Bitcoin directory containing debug logs, blockchain, etc.
    /var/lib/lightningd" # Lightningd Var Directory

Logs:
    /var/log/lightningd/log
    /var/log/bitcoin/debug.log (links to /var/lib/bitcoin/debug.log)

Info' Commands:
    sudo systemctl status lightningd # Show the status of the lightning daemon
    sudo journalctl -f -a -u lightningd # Show system log for lightningd (-f shows a rolling log)
    sudo systemctl status bitcoind # Show the status of the bitcoind daemon
    sudo journalctl -f -a -u bitcoind # Show system log for bitcoind (-f shows a rolling log)

How-To Copy this BTC Pruned Node (Establish New Pruned Nodes Quickly)
    #### Create ~/bitcoin.tar.gz File ####
    sudo systemctl stop bitcoind
    sudo rm ~/bitcoin.tar.gz
    cd ~; sudo tar -czvf bitcoin.tar.gz /var/lib/bitcoin # Compress

    #### From the Host, Download bitcoin.tar.gz ####
    sudo rm ~/bitcoin.tar.gz
    cd ~; scp -i ~/.ssh/vmkey satoshi@clightn.local:/home/satoshi/bitcoin.tar.gz .

    #### From the Host, Upload bitcoin.tar.gz to the NEW IMAGE ####
    NEW_IMGAGE=clightn
    scp -i ~/.ssh/vmkey ~/bitcoin.tar.gz satoshi@\${NEW_IMGAGE}.local:/home/satoshi/bitcoin.tar.gz

    #### From the NEW IMAGE, Extract Files to Appropriate Location ####
    sudo rm -rf /var/lib/bitcoin
    cd ~; sudo tar -xvzf bitcoin.tar.gz -C /
    sudo rm bitcoin.tar.gz

    #### Create Bitcoin User and Set Ownership ####
    sudo useradd --system --shell=/sbin/nologin bitcoin # Create a bitcoin System User
    sudo chown -R bitcoin:bitcoin /var/lib/bitcoin
EOF
read -p "Press the enter key to continue..."

# Run latest updates and upgrades
sudo apt-get -y update
sudo DEBIAN_FRONTEND=noninteractive apt-get -y install --only-upgrade openssh-server # Upgrade seperatly to ensure non-interactive mode
sudo apt-get -y upgrade

# Install Packages
sudo apt-get -y install wget psmisc xz-utils libpq5 autossh jq

# Install Pythong Modules
sudo apt-get -y install python3-pip python3-websockets python3-cryptography python3-gevent python3-gunicorn python3-flask python3-json5
sudo pip install pyln-client flask_restx flask_cors flask_socketio --break-system-packages

# Load global environment variables
source ~/globals.env

# Download Bitcoin Core, Verify Checksum
wget $BTC_CORE_SOURCE
if ! [ -f ~/${BTC_CORE_SOURCE##*/} ]; then echo "Error: Could not download source!"; exit 1; fi
if [[ ! "$(sha256sum ~/${BTC_CORE_SOURCE##*/})" == *"$BTC_CORE_CHECKSUM"* ]]; then
    echo "Error: SHA 256 Checksum for file \"~/${BTC_CORE_SOURCE##*/}\" was not what was expected!"
    exit 1
fi
tar -xzf ${BTC_CORE_SOURCE##*/}
rm ${BTC_CORE_SOURCE##*/}

# Install Binaries
sudo install -m 0755 -o root -g root -t /usr/bin bitcoin-*/bin/*
rm -rf bitcoin-*

# Prepare Service Configuration
cat << EOF | sudo tee /etc/systemd/system/bitcoind.service
[Unit]
Description=Bitcoin daemon
After=network-online.target
Wants=network-online.target

[Service]
ExecStart=/usr/bin/bitcoind -daemonwait -pid=/run/bitcoin/bitcoind.pid -conf=/etc/bitcoin.conf -datadir=/var/lib/bitcoin
ExecStop=/usr/bin/bitcoin-cli -conf=/etc/bitcoin.conf -datadir=/var/lib/bitcoin stop

Type=forking
PIDFile=/run/bitcoin/bitcoind.pid
Restart=always
RestartSec=30
TimeoutStartSec=infinity
TimeoutStopSec=600

### Run as bitcoin:bitcoin ###
User=bitcoin
Group=bitcoin

### /run/bitcoin ###
RuntimeDirectory=bitcoin
RuntimeDirectoryMode=0710

### /var/lib/bitcoin ###
StateDirectory=bitcoin
StateDirectoryMode=0710

### Hardening measures ###
PrivateTmp=true
ProtectSystem=full
ProtectHome=true
NoNewPrivileges=true
PrivateDevices=true
MemoryDenyWriteExecute=true

[Install]
WantedBy=multi-user.target
EOF

# Create a bitcoin System User
sudo useradd --system --shell=/sbin/nologin bitcoin

# Wrap the Bitcoin CLI Binary with its Runtime Configuration
echo "alias btc=\"sudo -u bitcoin /usr/bin/bitcoin-cli -datadir=/var/lib/bitcoin -conf=/etc/bitcoin.conf\"" | sudo tee -a /etc/bash.bashrc # Reestablish alias @ boot

# Generate Bitcoin Configuration File with the Appropriate Permissions
cat << EOF | sudo tee /etc/bitcoin.conf
# [core]
# Set database cache size in MB (The minimum value is 4; default is 450).
dbcache=256
# Reduce storage requirements by only storing this many MBs of the most recent blocks (The minimum value is 550).
prune=550

# [network]
# Connect only to the specified node and nothing else.
connect=$BTC_NODE_IP
# Accept incoming connections from peers.
listen=0

# [rpc]
# Accept command line and JSON-RPC commands.
server=1
# Username (satoshi) and hashed password (satoshi) for JSON-RPC connections.
rpcauth=satoshi:170f4d25565cfe8cbd3ab1c81ad25610\$a8327a4d2241c121e0cd88d1b693cdc6aa3dfbcebb6b863545d090f5d7fa614b
EOF
sudo chown root:bitcoin /etc/bitcoin.conf
sudo chmod 640 /etc/bitcoin.conf

# Configure bitcoind's Log Files; Prevents them from Filling up the Partition
cat << EOF | sudo tee /etc/logrotate.d/bitcoin
/var/log/bitcoin/debug.log {
$(printf '\t')create 660 root bitcoin
$(printf '\t')daily
$(printf '\t')rotate 14
$(printf '\t')compress
$(printf '\t')delaycompress
$(printf '\t')sharedscripts
$(printf '\t')postrotate
$(printf '\t')$(printf '\t')killall -HUP bitcoind
$(printf '\t')endscript
}
EOF

# Setup a Symbolic Link to Standardize the Location of bitcoind's Log Files
sudo mkdir -p /var/log/bitcoin
sudo ln -s /var/lib/bitcoin/debug.log /var/log/bitcoin/debug.log
sudo chown root:bitcoin -R /var/log/bitcoin
sudo chmod 660 -R /var/log/bitcoin

# Download Core Lightning, Verify Checksum, and Install
sudo wget $LIGHTNING_CORE_SOURCE
if ! [ -f ~/${LIGHTNING_CORE_SOURCE##*/} ]; then echo "Error: Could not download Core Lightning source!"; exit 1; fi
if [[ ! "$(sha256sum ~/${LIGHTNING_CORE_SOURCE##*/})" == *"$LIGHTNING_CORE_CHECKSUM"* ]]; then
    echo "Error: SHA 256 Checksum for file \"~/${LIGHTNING_CORE_SOURCE##*/}\" was not what was expected!"
    exit 1
fi
sudo tar -xvf ${LIGHTNING_CORE_SOURCE##*/} -C /usr/local --strip-components=2
sudo rm ${LIGHTNING_CORE_SOURCE##*/}

# Create lightning System User & Group; Add satoshi to the lightning Group
sudo useradd --system --shell=/sbin/nologin lightning
sudo usermod -a -G lightning satoshi

# Prepare Service Configuration
cat << EOF | sudo tee /etc/systemd/system/lightningd.service
[Unit]
Description=Core Lightning Daemon
Wants=network-online.target
After=network-online.target
After=btc-node-autossh.service

[Service]
ExecStart=/usr/local/bin/lightningd --conf /etc/lightningd.conf --pid-file /run/lightningd/lightningd.pid
ExecStop=/usr/local/bin/lightning-cli --conf=/etc/lightningd.conf stop

Type=simple
PIDFile=/run/lightningd/lightningd.pid
Restart=on-failure

### Creates /run/lightningd owned by lightning ###
RuntimeDirectory=lightningd

### Run as lightning:lightning ###
User=lightning
Group=lightning

### Hardening Measures ###
PrivateTmp=true
ProtectSystem=full
NoNewPrivileges=true
PrivateDevices=true
MemoryDenyWriteExecute=true

[Install]
WantedBy=multi-user.target
EOF

# Query freely available services to discover or get the external IPv4 address
if [[ 0 = 1 ]]; then MY_EXTERNAL_IP=127.0.0.1
elif [[ $(curl -s -4 icanhazip.com) =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then MY_EXTERNAL_IP=$(curl -s -4 icanhazip.com)
elif [[ $(curl -s -4 http://dynamicdns.park-your-domain.com/getip) =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then MY_EXTERNAL_IP=$(curl -s -4 http://dynamicdns.park-your-domain.com/getip)
elif [[ $(curl -s -4 ifconfig.me) =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then MY_EXTERNAL_IP=$(curl -s -4 ifconfig.me)
elif [[ $(curl -s -4 ipinfo.io/ip) =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then MY_EXTERNAL_IP=$(curl -s -4 ipinfo.io/ip)
elif [[ $(curl -s -4 api.ipify.org) =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then MY_EXTERNAL_IP=$(curl -s -4 api.ipify.org)
elif [[ $(curl -s -4 ident.me) =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then MY_EXTERNAL_IP=$(curl -s -4 ident.me)
elif [[ $(curl -s -4 checkip.amazonaws.com) =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then MY_EXTERNAL_IP=$(curl -s -4 checkip.amazonaws.com)
elif [[ $(curl -s -4 ipecho.net/plain) =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then MY_EXTERNAL_IP=$(curl -s -4 ipecho.net/plain)
elif [[ $(curl -s -4 ifconfig.co) =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then MY_EXTERNAL_IP=$(curl -s -4 ifconfig.co)
else MY_EXTERNAL_IP=127.0.0.1; fi

# Generate Core Lightning Configuration File with the Appropriate Permissions
cat << EOF | sudo tee /etc/lightningd.conf
# Select the network
network=bitcoin
# Run in the background
daemon
# Set base directory
lightning-dir=/var/lib/lightningd
# Amount to leave in wallet for spending anchor closes (default: 25000000)
min-emergency-msat=100000000
# Lightningd Database Backup
wallet=sqlite3:///var/lib/lightningd/bitcoin/lightningd.sqlite3:/var/lib/lightningd/bitcoin/lightningd.sqlite3.backup

############## LND Node Configuration ##############
# RRGGBB hex color for node
rgb=$LIGHTNING_RGBHEX_COLOR
# Up to 32-byte alias for node
alias=${MICRO_BANK_NAME// /}

############## Bitcoin Node ##############
# datadir arg for bitcoin-cli
bitcoin-datadir=/var/lib/bitcoin
# bitcoind RPC username
bitcoin-rpcuser=satoshi
# bitcoind RPC password
bitcoin-rpcpassword=satoshi
# bitcoind RPC host to connect to
bitcoin-rpcconnect=$BTC_NODE_IP

############## Logging ##############
# log level (io, debug, info, unusual, broken) [:prefix] (default: info)
log-level=debug
# Log to file (- for stdout)
log-file=/var/log/lightningd/log

############## Channel Creation Policy ##############
# Minimum capacity in satoshis for accepting channels (default: 10000)
min-capacity-sat=1000000
# Minimum fee to charge for every (incomming) payment which passes through (in HTLC) (millisatoshis; 1/1000 of a satoshi) (default: 1000)
fee-base=1
# Microsatoshi fee for every satoshi in HTLC (10 is 0.001%, 100 is 0.01%, 1000 is 0.1% etc.) (default: 10)
fee-per-satoshi=1

############## Network ##############
# Set an IP address and port to listen on
bind-addr=0.0.0.0:9735
# Set an IP address and port to announce so peers can find your node
announce-addr=${MY_EXTERNAL_IP}:9735
EOF
sudo chown root:lightning /etc/lightningd.conf
sudo chmod 640 /etc/lightningd.conf

# Create lightning directory
sudo mkdir -p /var/lib/lightningd
sudo chown lightning:lightning -R /var/lib/lightningd
sudo chmod 710 -R /var/lib/lightningd

# Create lightningd log file location /w appropriate permissions
sudo mkdir -p /var/log/lightningd
sudo chown root:lightning -R /var/log/lightningd
sudo chmod 670 -R /var/log/lightningd

# Configure lightningd's Log file from Filling up the partition
cat << EOF | sudo tee /etc/logrotate.d/lightningd
/var/log/lightningd/log {
$(printf '\t')create 660 root lightning
$(printf '\t')daily
$(printf '\t')rotate 14
$(printf '\t')compress
$(printf '\t')delaycompress
$(printf '\t')sharedscripts
$(printf '\t')postrotate
$(printf '\t')$(printf '\t')create
$(printf '\t')endscript
}
EOF

# Establish alias for lightning-cli
echo $'alias lncli="sudo -u lightning lightning-cli --conf=/etc/lightningd.conf"' | sudo tee -a /etc/bash.bashrc

##### Reload/Enable System Control for new processes #####
sudo systemctl daemon-reload
sudo systemctl enable bitcoind
sudo systemctl enable lightningd

##### Install lightning node utilities #####
bash ~/microbank/scripts/litu.sh --install
bash ~/microbank/scripts/send_messages.sh --install

##### Backup/Restore #####
# Create links (for backup purposes) to all critical files needed to restore this node
cd ~; mkdir backup
sudo ln -s /var/lib/lightningd/bitcoin/hsm_secret ~/backup # HD wallet seed for On-chain funds stored in byte-form. Only need to backup once!
sudo ln -s /var/lib/lightningd/bitcoin/emergency.recover ~/backup # Each time a new channel is created, this file will need to be backed up anew.
    # Note: Static channel recovery file that requires cooperation with peers and should only be used as a last resort!
sudo ln -s /var/lib/lightningd/bitcoin/lightningd.sqlite3.backup ~/backup # Lightning daemon database backup

# If "~/restore" folder is present then restore all pertinent files; assumes all files are present
if [[ -d ~/restore ]]; then
    # Restore ownership to files
    sudo chown lightning:lightning ~/restore/hsm_secret
    sudo chown lightning:lightning ~/restore/emergency.recover
    sudo chown lightning:lightning ~/restore/lightningd.sqlite3.backup

    # Move files to their correct locations
    sudo mv ~/restore/hsm_secret /var/lib/lightningd/bitcoin/hsm_secret
    sudo mv ~/restore/emergency.recover /var/lib/lightningd/bitcoin/emergency.recover
    sudo mv ~/restore/lightningd.sqlite3.backup /var/lib/lightningd/bitcoin/lightningd.sqlite3.backup

    echo ""
    echo "EXTREMELY IMPORTANT:"
    echo "    In order to restore the lightningd database, YOU MUST rename the file \"/var/lib/lightningd/bitcoin/lightningd.sqlite3.backup\""
    echo "    with the \".backup\" extension removed. THIS MAY CAUSE PERMANENT LOSS OF FUNDS IN THE CHANNELS if the restored backup was not the"
    echo "    absolute latest (i.e. does not contain the last states of the channels)! In other words, this backup, being restored, better be"
    echo "    one that was created intentionally (with the lightningd shutdown) just before this restore process began!"
    echo ""
    echo "Once finished, MANUALLY REBOOT THIS VM INSTANCE!"
    echo ""
    read -p "Press the enter key to continue..."

    # Remove the "~/restore" folder
    cd ~; sudo rm -rf restore
else
    sudo reboot now # Only restart the machine if the install did not restore from a backup
fi
