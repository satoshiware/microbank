#!/bin/bash

# Make sure we are not running as root, but that we have sudo privileges.
if [ "$(id -u)" = "0" ]; then
   echo "This script must NOT be run as root (or with sudo)!"
   echo "if you need to create a sudo user (e.g. satoshi), run the following commands:"
   echo "   sudo adduser satoshi"
   echo "   sudo usermod -aG sudo satoshi"
   echo "   sudo su satoshi # Switch to the new user"
   exit 1
elif [ "$(sudo -l | grep '(ALL : ALL) ALL' | wc -l)" = 0 ]; then
   echo "You do not have enough sudo privileges!"
   exit 1
fi
cd ~; sudo pwd # Print Working Directory; have the user enable sudo access if not already.

# Give the user pertinent information about this script and how to use it.
cat << EOF | sudo tee ~/readme.txt
This readme was generated by the "stratum_proxy_btc_to_micro.sh" install script.

This is a bitcoin mining (proxy) pool that allows any user to "mine" a given microcurrency indirectly. It works by mining
bitcoins, but paying out in a given microcurrency. Note: This server only parses the email addresses, payout addresses, 
and the amount of work each miner has done and then passes this information along (via email) to be processed further.
It is a proxy pool because it uses another (bigger) pool as its backend.

Backend Pool Configuration:	Edit the file "/etc/ckproxy.conf" to configure the "url", "auth" (username.workername), and "pass" (password)
Email Configuration: send_messages --generate



How do we keep others locked out???? We don't want outsiders???





user.worker = email.microcurrency_payout_address
ok, what about email addresses that have a period in them?



FYI:
    Use the mnconnect utility (just type "mnconnect" at the prompt) to create, view, or delete the connection with the p2p node.
    Use the poolu tool to configure notifications and view all the pertinent informaiton for a healthy mining operation (and setup a remote mining operations)
    Configure the send_messages utility (just type "send_messages --generate" at the prompt) to receive messages from this node.

    
    The "sudo systemctl status bitcoind" command show the status of the bitcoin daemon.
EOF
read -p "Press the enter key to continue..."

# Run latest updates and upgrades
sudo apt-get -y update
sudo DEBIAN_FRONTEND=noninteractive apt-get -y install --only-upgrade openssh-server # Upgrade seperatly to ensure non-interactive mode
sudo apt-get -y upgrade

# Install Packages
sudo apt-get -y install build-essential yasm autoconf automake libtool libzmq3-dev
sudo apt-get -y install pkg-config # ckpool/ckproxy will not successfully configure/compile without this package using Debian Bookworm (x12)

# Compile/Install CKPool/CKProxy
git clone https://github.com/satoshiware/ckpool
cd ckpool
./autogen.sh
./configure -prefix /usr
make clean
make
sudo make install
cd ..; rm -rf ckpool

# Create a ckpool System User
sudo useradd --system --shell=/sbin/nologin ckpool

# Create ckpool Log Folders
sudo mkdir -p /var/log/ckpool
sudo chown root:ckpool -R /var/log/ckpool
sudo chmod 670 -R /var/log/ckpool

# Create ckproxy.service (Systemd)
cat << EOF | sudo tee /etc/systemd/system/ckproxy.service
[Unit]
Description=ckproxy (Stratum) Server
After=network-online.target
Wants=bitcoind.service

[Service]
ExecStart=/usr/bin/ckproxy --log-shares --killold --config /etc/ckproxy.conf

Type=simple
PIDFile=/tmp/ckpool/main.pid
Restart=always
RestartSec=30
TimeoutStopSec=30

### Run as ckpool:ckpool ###
User=ckpool
Group=ckpool

### Hardening measures ###
ProtectSystem=full
ProtectHome=true
NoNewPrivileges=true
PrivateDevices=true

[Install]
WantedBy=multi-user.target
EOF

# Reload/Enable System Control for new processes
sudo systemctl daemon-reload
echo "waiting a few seconds for bitcoind to start"; sleep 15

# Create ckproxy Configuration File
cat << EOF | sudo tee /etc/ckproxy.conf
{
"proxy" : [
$(printf '\t'){
$(printf '\t')"url" : "\$URL",
$(printf '\t')"auth" : "\$USER.WORKERNAME",
$(printf '\t')"pass" : "",
$(printf '\t')"notify" : true
$(printf '\t')}
],
"serverurl" : [
$(printf '\t')"0.0.0.0:3333"
],
"mindiff" : 1,
"startdiff" : 42,
"maxdiff" : 0,
"zmqblock" : "tcp://127.0.0.1:28332",
"logdir" : "/var/log/ckpool"
}
EOF

sudo chown root:ckpool /etc/ckproxy.conf
sudo chmod 640 /etc/ckproxy.conf

# Reload/Enable System Control for ckproxy
sudo systemctl daemon-reload
sudo systemctl enable ckproxy

# Configure ckpool's Log Files; Prevents them from Filling up the Partition
cat << EOF | sudo tee /etc/logrotate.d/ckpool
/var/log/ckpool/ckpool.log {
$(printf '\t')create 644 ckpool ckpool
$(printf '\t')daily
$(printf '\t')rotate 14
$(printf '\t')compress
$(printf '\t')delaycompress
$(printf '\t')sharedscripts
}
EOF

# Install the micronode connection and stratum utilities
bash ~/microbank/scripts/send_messages.sh --install

# Create links (for backup purposes) to all critical files needed to restore this node
cd ~; mkdir backup
sudo ln -s /etc/ckproxy.conf ~/backup
sudo ln -s /etc/default/send_messages.env ~/backup
sudo ln -s /var/spool/cron/crontabs/satoshi ~/backup

# If "~/restore" folder is present then restore all pertinent wallet node files; assumes all files are present
if [[ -d ~/restore ]]; then
    # Restore ownership to files
    sudo chown root:ckpool ~/restore/ckproxy.conf
    sudo chown root:root ~/restore/send_messages.env
    
    # Move files to their correct locations
    sudo mv ~/restore/ckproxy.conf /etc/ckproxy.conf
    sudo mv ~/restore/send_messages.env /etc/default/send_messages.env
    
    # Import Cron jobs
    while read -r line; do
        readLine=$line
        if [[ $readLine == *"/bin/bash"* ]]; then
            (crontab -l | grep -v -F "$readLine"; echo "$readLine") | crontab -
            sleep 3
        fi
    done < ~/restore/satoshi

    # Remove the "~/restore" folder
    cd ~; sudo rm -rf restore
fi

# Restart the machine
sudo reboot now